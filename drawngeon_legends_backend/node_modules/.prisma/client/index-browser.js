
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.9.0
 * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
 */
Prisma.prismaVersion = {
  client: "4.9.0",
  engine: "ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AvatarGameScalarFieldEnum = makeEnum({
  id: 'id',
  stage: 'stage',
  finished: 'finished',
  position: 'position',
  skill: 'skill',
  avatarId: 'avatarId',
  gameId: 'gameId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AvatarScalarFieldEnum = makeEnum({
  id: 'id',
  nick: 'nick',
  stamina: 'stamina',
  mana: 'mana',
  level: 'level',
  xp: 'xp',
  gold: 'gold',
  identity: 'identity',
  breed: 'breed',
  class: 'class',
  skill: 'skill',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.EnrollmentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  birthday: 'birthday',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.EquipItemScalarFieldEnum = makeEnum({
  id: 'id',
  avatarId: 'avatarId',
  amuletId: 'amuletId',
  handRigthId: 'handRigthId',
  handLeftId: 'handLeftId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.GameScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  level: 'level',
  description: 'description',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.GameStageScalarFieldEnum = makeEnum({
  id: 'id',
  position: 'position',
  gameId: 'gameId',
  stageId: 'stageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ItemScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  type: 'type',
  effect: 'effect',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StageScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  options: 'options',
  description: 'description',
  objects: 'objects',
  refStageId: 'refStageId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserItemScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.VoteScalarFieldEnum = makeEnum({
  id: 'id',
  note: 'note',
  post: 'post',
  userId: 'userId',
  gameId: 'gameId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});
exports.Classes = makeEnum({
  KNIGHT: 'KNIGHT',
  CLERIC: 'CLERIC',
  SORCERER: 'SORCERER',
  ROGUE: 'ROGUE'
});

exports.Gender = makeEnum({
  MALE: 'MALE',
  FAMELE: 'FAMELE'
});

exports.Races = makeEnum({
  HUMAN: 'HUMAN',
  ELF: 'ELF',
  DWARF: 'DWARF',
  HALF_ORC: 'HALF_ORC'
});

exports.Skills = makeEnum({
  BERSEKER: 'BERSEKER',
  SHIELD_OF_FAITH: 'SHIELD_OF_FAITH',
  CLAIRVOYANCE: 'CLAIRVOYANCE',
  INVISIBILITY: 'INVISIBILITY',
  STEALTH: 'STEALTH'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Session: 'Session',
  Enrollment: 'Enrollment',
  Avatar: 'Avatar',
  Game: 'Game',
  AvatarGame: 'AvatarGame',
  Stage: 'Stage',
  GameStage: 'GameStage',
  Item: 'Item',
  UserItem: 'UserItem',
  EquipItem: 'EquipItem',
  Vote: 'Vote'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
