
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  password: string
  active: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: number
  userId: number
  token: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Enrollment
 * 
 */
export type Enrollment = {
  id: number
  name: string
  birthday: Date
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Avatar
 * 
 */
export type Avatar = {
  id: number
  nick: string
  stamina: number
  mana: number
  level: number
  xp: number
  gold: number
  identity: Gender
  breed: Races
  class: Classes
  skill: Skills
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Game
 * 
 */
export type Game = {
  id: number
  name: string
  level: number
  description: string
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model AvatarGame
 * 
 */
export type AvatarGame = {
  id: number
  stage: string
  finished: boolean
  position: number
  skill: boolean
  avatarId: number
  gameId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Stage
 * 
 */
export type Stage = {
  id: number
  name: string
  options: string
  description: string
  objects: string
  refStageId: number
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model GameStage
 * 
 */
export type GameStage = {
  id: number
  position: number
  gameId: number
  stageId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Item
 * 
 */
export type Item = {
  id: number
  name: string
  type: string
  effect: string
  price: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model UserItem
 * 
 */
export type UserItem = {
  id: number
  userId: number
  itemId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model EquipItem
 * 
 */
export type EquipItem = {
  id: number
  avatarId: number
  amuletId: number
  handRigthId: number
  handLeftId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Vote
 * 
 */
export type Vote = {
  id: number
  note: number
  post: string
  userId: number
  gameId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Classes: {
  KNIGHT: 'KNIGHT',
  CLERIC: 'CLERIC',
  SORCERER: 'SORCERER',
  ROGUE: 'ROGUE'
};

export type Classes = (typeof Classes)[keyof typeof Classes]


export const Gender: {
  MALE: 'MALE',
  FAMELE: 'FAMELE'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Races: {
  HUMAN: 'HUMAN',
  ELF: 'ELF',
  DWARF: 'DWARF',
  HALF_ORC: 'HALF_ORC'
};

export type Races = (typeof Races)[keyof typeof Races]


export const Skills: {
  BERSEKER: 'BERSEKER',
  SHIELD_OF_FAITH: 'SHIELD_OF_FAITH',
  CLAIRVOYANCE: 'CLAIRVOYANCE',
  INVISIBILITY: 'INVISIBILITY',
  STEALTH: 'STEALTH'
};

export type Skills = (typeof Skills)[keyof typeof Skills]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollment.findMany()
    * ```
    */
  get enrollment(): Prisma.EnrollmentDelegate<GlobalReject>;

  /**
   * `prisma.avatar`: Exposes CRUD operations for the **Avatar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avatars
    * const avatars = await prisma.avatar.findMany()
    * ```
    */
  get avatar(): Prisma.AvatarDelegate<GlobalReject>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<GlobalReject>;

  /**
   * `prisma.avatarGame`: Exposes CRUD operations for the **AvatarGame** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AvatarGames
    * const avatarGames = await prisma.avatarGame.findMany()
    * ```
    */
  get avatarGame(): Prisma.AvatarGameDelegate<GlobalReject>;

  /**
   * `prisma.stage`: Exposes CRUD operations for the **Stage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stages
    * const stages = await prisma.stage.findMany()
    * ```
    */
  get stage(): Prisma.StageDelegate<GlobalReject>;

  /**
   * `prisma.gameStage`: Exposes CRUD operations for the **GameStage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameStages
    * const gameStages = await prisma.gameStage.findMany()
    * ```
    */
  get gameStage(): Prisma.GameStageDelegate<GlobalReject>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<GlobalReject>;

  /**
   * `prisma.userItem`: Exposes CRUD operations for the **UserItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserItems
    * const userItems = await prisma.userItem.findMany()
    * ```
    */
  get userItem(): Prisma.UserItemDelegate<GlobalReject>;

  /**
   * `prisma.equipItem`: Exposes CRUD operations for the **EquipItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EquipItems
    * const equipItems = await prisma.equipItem.findMany()
    * ```
    */
  get equipItem(): Prisma.EquipItemDelegate<GlobalReject>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Enrollment: 'Enrollment',
    Avatar: 'Avatar',
    Game: 'Game',
    AvatarGame: 'AvatarGame',
    Stage: 'Stage',
    GameStage: 'GameStage',
    Item: 'Item',
    UserItem: 'UserItem',
    EquipItem: 'EquipItem',
    Vote: 'Vote'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Session: number
    Enrollment: number
    Avatar: number
    Game: number
    Stage: number
    UserItem: number
    Vote: number
  }

  export type UserCountOutputTypeSelect = {
    Session?: boolean
    Enrollment?: boolean
    Avatar?: boolean
    Game?: boolean
    Stage?: boolean
    UserItem?: boolean
    Vote?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AvatarCountOutputType
   */


  export type AvatarCountOutputType = {
    EquipItem: number
    AvatarGame: number
  }

  export type AvatarCountOutputTypeSelect = {
    EquipItem?: boolean
    AvatarGame?: boolean
  }

  export type AvatarCountOutputTypeGetPayload<S extends boolean | null | undefined | AvatarCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AvatarCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AvatarCountOutputTypeArgs)
    ? AvatarCountOutputType 
    : S extends { select: any } & (AvatarCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AvatarCountOutputType ? AvatarCountOutputType[P] : never
  } 
      : AvatarCountOutputType




  // Custom InputTypes

  /**
   * AvatarCountOutputType without action
   */
  export type AvatarCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AvatarCountOutputType
     */
    select?: AvatarCountOutputTypeSelect | null
  }



  /**
   * Count Type GameCountOutputType
   */


  export type GameCountOutputType = {
    AvatarGame: number
    GameStage: number
    Vote: number
  }

  export type GameCountOutputTypeSelect = {
    AvatarGame?: boolean
    GameStage?: boolean
    Vote?: boolean
  }

  export type GameCountOutputTypeGetPayload<S extends boolean | null | undefined | GameCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GameCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GameCountOutputTypeArgs)
    ? GameCountOutputType 
    : S extends { select: any } & (GameCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GameCountOutputType ? GameCountOutputType[P] : never
  } 
      : GameCountOutputType




  // Custom InputTypes

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect | null
  }



  /**
   * Count Type StageCountOutputType
   */


  export type StageCountOutputType = {
    GameStage: number
  }

  export type StageCountOutputTypeSelect = {
    GameStage?: boolean
  }

  export type StageCountOutputTypeGetPayload<S extends boolean | null | undefined | StageCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? StageCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (StageCountOutputTypeArgs)
    ? StageCountOutputType 
    : S extends { select: any } & (StageCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof StageCountOutputType ? StageCountOutputType[P] : never
  } 
      : StageCountOutputType




  // Custom InputTypes

  /**
   * StageCountOutputType without action
   */
  export type StageCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StageCountOutputType
     */
    select?: StageCountOutputTypeSelect | null
  }



  /**
   * Count Type ItemCountOutputType
   */


  export type ItemCountOutputType = {
    UserItem: number
    EquipItem: number
  }

  export type ItemCountOutputTypeSelect = {
    UserItem?: boolean
    EquipItem?: boolean
  }

  export type ItemCountOutputTypeGetPayload<S extends boolean | null | undefined | ItemCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ItemCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ItemCountOutputTypeArgs)
    ? ItemCountOutputType 
    : S extends { select: any } & (ItemCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ItemCountOutputType ? ItemCountOutputType[P] : never
  } 
      : ItemCountOutputType




  // Custom InputTypes

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Session?: boolean | User$SessionArgs
    Enrollment?: boolean | User$EnrollmentArgs
    Avatar?: boolean | User$AvatarArgs
    Game?: boolean | User$GameArgs
    Stage?: boolean | User$StageArgs
    UserItem?: boolean | User$UserItemArgs
    Vote?: boolean | User$VoteArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    Session?: boolean | User$SessionArgs
    Enrollment?: boolean | User$EnrollmentArgs
    Avatar?: boolean | User$AvatarArgs
    Game?: boolean | User$GameArgs
    Stage?: boolean | User$StageArgs
    UserItem?: boolean | User$UserItemArgs
    Vote?: boolean | User$VoteArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Session' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'Enrollment' ? Array < EnrollmentGetPayload<S['include'][P]>>  :
        P extends 'Avatar' ? Array < AvatarGetPayload<S['include'][P]>>  :
        P extends 'Game' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends 'Stage' ? Array < StageGetPayload<S['include'][P]>>  :
        P extends 'UserItem' ? Array < UserItemGetPayload<S['include'][P]>>  :
        P extends 'Vote' ? Array < VoteGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Session' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'Enrollment' ? Array < EnrollmentGetPayload<S['select'][P]>>  :
        P extends 'Avatar' ? Array < AvatarGetPayload<S['select'][P]>>  :
        P extends 'Game' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends 'Stage' ? Array < StageGetPayload<S['select'][P]>>  :
        P extends 'UserItem' ? Array < UserItemGetPayload<S['select'][P]>>  :
        P extends 'Vote' ? Array < VoteGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Session<T extends User$SessionArgs= {}>(args?: Subset<T, User$SessionArgs>): PrismaPromise<Array<SessionGetPayload<T>>| Null>;

    Enrollment<T extends User$EnrollmentArgs= {}>(args?: Subset<T, User$EnrollmentArgs>): PrismaPromise<Array<EnrollmentGetPayload<T>>| Null>;

    Avatar<T extends User$AvatarArgs= {}>(args?: Subset<T, User$AvatarArgs>): PrismaPromise<Array<AvatarGetPayload<T>>| Null>;

    Game<T extends User$GameArgs= {}>(args?: Subset<T, User$GameArgs>): PrismaPromise<Array<GameGetPayload<T>>| Null>;

    Stage<T extends User$StageArgs= {}>(args?: Subset<T, User$StageArgs>): PrismaPromise<Array<StageGetPayload<T>>| Null>;

    UserItem<T extends User$UserItemArgs= {}>(args?: Subset<T, User$UserItemArgs>): PrismaPromise<Array<UserItemGetPayload<T>>| Null>;

    Vote<T extends User$VoteArgs= {}>(args?: Subset<T, User$VoteArgs>): PrismaPromise<Array<VoteGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Session
   */
  export type User$SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * User.Enrollment
   */
  export type User$EnrollmentArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    where?: EnrollmentWhereInput
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EnrollmentScalarFieldEnum>
  }


  /**
   * User.Avatar
   */
  export type User$AvatarArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    where?: AvatarWhereInput
    orderBy?: Enumerable<AvatarOrderByWithRelationInput>
    cursor?: AvatarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AvatarScalarFieldEnum>
  }


  /**
   * User.Game
   */
  export type User$GameArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * User.Stage
   */
  export type User$StageArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    where?: StageWhereInput
    orderBy?: Enumerable<StageOrderByWithRelationInput>
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StageScalarFieldEnum>
  }


  /**
   * User.UserItem
   */
  export type User$UserItemArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    where?: UserItemWhereInput
    orderBy?: Enumerable<UserItemOrderByWithRelationInput>
    cursor?: UserItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserItemScalarFieldEnum>
  }


  /**
   * User.Vote
   */
  export type User$VoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    where?: VoteWhereInput
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: number
    userId: number
    token: string
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type SessionInclude = {
    User?: boolean | UserArgs
  }

  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
  }



  /**
   * Model Enrollment
   */


  export type AggregateEnrollment = {
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  export type EnrollmentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type EnrollmentSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type EnrollmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    birthday: Date | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrollmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    birthday: Date | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrollmentCountAggregateOutputType = {
    id: number
    name: number
    birthday: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EnrollmentAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type EnrollmentSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type EnrollmentMinAggregateInputType = {
    id?: true
    name?: true
    birthday?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrollmentMaxAggregateInputType = {
    id?: true
    name?: true
    birthday?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrollmentCountAggregateInputType = {
    id?: true
    name?: true
    birthday?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EnrollmentAggregateArgs = {
    /**
     * Filter which Enrollment to aggregate.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentMaxAggregateInputType
  }

  export type GetEnrollmentAggregateType<T extends EnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollment[P]>
      : GetScalarType<T[P], AggregateEnrollment[P]>
  }




  export type EnrollmentGroupByArgs = {
    where?: EnrollmentWhereInput
    orderBy?: Enumerable<EnrollmentOrderByWithAggregationInput>
    by: EnrollmentScalarFieldEnum[]
    having?: EnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentCountAggregateInputType | true
    _avg?: EnrollmentAvgAggregateInputType
    _sum?: EnrollmentSumAggregateInputType
    _min?: EnrollmentMinAggregateInputType
    _max?: EnrollmentMaxAggregateInputType
  }


  export type EnrollmentGroupByOutputType = {
    id: number
    name: string
    birthday: Date
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  type GetEnrollmentGroupByPayload<T extends EnrollmentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentSelect = {
    id?: boolean
    name?: boolean
    birthday?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type EnrollmentInclude = {
    User?: boolean | UserArgs
  }

  export type EnrollmentGetPayload<S extends boolean | null | undefined | EnrollmentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Enrollment :
    S extends undefined ? never :
    S extends { include: any } & (EnrollmentArgs | EnrollmentFindManyArgs)
    ? Enrollment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EnrollmentArgs | EnrollmentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Enrollment ? Enrollment[P] : never
  } 
      : Enrollment


  type EnrollmentCountArgs = 
    Omit<EnrollmentFindManyArgs, 'select' | 'include'> & {
      select?: EnrollmentCountAggregateInputType | true
    }

  export interface EnrollmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Enrollment that matches the filter.
     * @param {EnrollmentFindUniqueArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnrollmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EnrollmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Enrollment'> extends True ? Prisma__EnrollmentClient<EnrollmentGetPayload<T>> : Prisma__EnrollmentClient<EnrollmentGetPayload<T> | null, null>

    /**
     * Find one Enrollment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EnrollmentFindUniqueOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EnrollmentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EnrollmentFindUniqueOrThrowArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Find the first Enrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnrollmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EnrollmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Enrollment'> extends True ? Prisma__EnrollmentClient<EnrollmentGetPayload<T>> : Prisma__EnrollmentClient<EnrollmentGetPayload<T> | null, null>

    /**
     * Find the first Enrollment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EnrollmentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EnrollmentFindFirstOrThrowArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollment.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EnrollmentFindManyArgs>(
      args?: SelectSubset<T, EnrollmentFindManyArgs>
    ): PrismaPromise<Array<EnrollmentGetPayload<T>>>

    /**
     * Create a Enrollment.
     * @param {EnrollmentCreateArgs} args - Arguments to create a Enrollment.
     * @example
     * // Create one Enrollment
     * const Enrollment = await prisma.enrollment.create({
     *   data: {
     *     // ... data to create a Enrollment
     *   }
     * })
     * 
    **/
    create<T extends EnrollmentCreateArgs>(
      args: SelectSubset<T, EnrollmentCreateArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Create many Enrollments.
     *     @param {EnrollmentCreateManyArgs} args - Arguments to create many Enrollments.
     *     @example
     *     // Create many Enrollments
     *     const enrollment = await prisma.enrollment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnrollmentCreateManyArgs>(
      args?: SelectSubset<T, EnrollmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Enrollment.
     * @param {EnrollmentDeleteArgs} args - Arguments to delete one Enrollment.
     * @example
     * // Delete one Enrollment
     * const Enrollment = await prisma.enrollment.delete({
     *   where: {
     *     // ... filter to delete one Enrollment
     *   }
     * })
     * 
    **/
    delete<T extends EnrollmentDeleteArgs>(
      args: SelectSubset<T, EnrollmentDeleteArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Update one Enrollment.
     * @param {EnrollmentUpdateArgs} args - Arguments to update one Enrollment.
     * @example
     * // Update one Enrollment
     * const enrollment = await prisma.enrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnrollmentUpdateArgs>(
      args: SelectSubset<T, EnrollmentUpdateArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnrollmentDeleteManyArgs>(
      args?: SelectSubset<T, EnrollmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollment = await prisma.enrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnrollmentUpdateManyArgs>(
      args: SelectSubset<T, EnrollmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollment.
     * @param {EnrollmentUpsertArgs} args - Arguments to update or create a Enrollment.
     * @example
     * // Update or create a Enrollment
     * const enrollment = await prisma.enrollment.upsert({
     *   create: {
     *     // ... data to create a Enrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollment we want to update
     *   }
     * })
    **/
    upsert<T extends EnrollmentUpsertArgs>(
      args: SelectSubset<T, EnrollmentUpsertArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollment.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentCountArgs>(
      args?: Subset<T, EnrollmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentAggregateArgs>(args: Subset<T, EnrollmentAggregateArgs>): PrismaPromise<GetEnrollmentAggregateType<T>>

    /**
     * Group by Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EnrollmentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Enrollment base type for findUnique actions
   */
  export type EnrollmentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findUnique
   */
  export interface EnrollmentFindUniqueArgs extends EnrollmentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Enrollment findUniqueOrThrow
   */
  export type EnrollmentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }


  /**
   * Enrollment base type for findFirst actions
   */
  export type EnrollmentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: Enumerable<EnrollmentScalarFieldEnum>
  }

  /**
   * Enrollment findFirst
   */
  export interface EnrollmentFindFirstArgs extends EnrollmentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Enrollment findFirstOrThrow
   */
  export type EnrollmentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: Enumerable<EnrollmentScalarFieldEnum>
  }


  /**
   * Enrollment findMany
   */
  export type EnrollmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: Enumerable<EnrollmentScalarFieldEnum>
  }


  /**
   * Enrollment create
   */
  export type EnrollmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * The data needed to create a Enrollment.
     */
    data: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
  }


  /**
   * Enrollment createMany
   */
  export type EnrollmentCreateManyArgs = {
    /**
     * The data used to create many Enrollments.
     */
    data: Enumerable<EnrollmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Enrollment update
   */
  export type EnrollmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * The data needed to update a Enrollment.
     */
    data: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
    /**
     * Choose, which Enrollment to update.
     */
    where: EnrollmentWhereUniqueInput
  }


  /**
   * Enrollment updateMany
   */
  export type EnrollmentUpdateManyArgs = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentWhereInput
  }


  /**
   * Enrollment upsert
   */
  export type EnrollmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * The filter to search for the Enrollment to update in case it exists.
     */
    where: EnrollmentWhereUniqueInput
    /**
     * In case the Enrollment found by the `where` argument doesn't exist, create a new Enrollment with this data.
     */
    create: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
    /**
     * In case the Enrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
  }


  /**
   * Enrollment delete
   */
  export type EnrollmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
    /**
     * Filter which Enrollment to delete.
     */
    where: EnrollmentWhereUniqueInput
  }


  /**
   * Enrollment deleteMany
   */
  export type EnrollmentDeleteManyArgs = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentWhereInput
  }


  /**
   * Enrollment without action
   */
  export type EnrollmentArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentInclude | null
  }



  /**
   * Model Avatar
   */


  export type AggregateAvatar = {
    _count: AvatarCountAggregateOutputType | null
    _avg: AvatarAvgAggregateOutputType | null
    _sum: AvatarSumAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  export type AvatarAvgAggregateOutputType = {
    id: number | null
    stamina: number | null
    mana: number | null
    level: number | null
    xp: number | null
    gold: number | null
    userId: number | null
  }

  export type AvatarSumAggregateOutputType = {
    id: number | null
    stamina: number | null
    mana: number | null
    level: number | null
    xp: number | null
    gold: number | null
    userId: number | null
  }

  export type AvatarMinAggregateOutputType = {
    id: number | null
    nick: string | null
    stamina: number | null
    mana: number | null
    level: number | null
    xp: number | null
    gold: number | null
    identity: Gender | null
    breed: Races | null
    class: Classes | null
    skill: Skills | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AvatarMaxAggregateOutputType = {
    id: number | null
    nick: string | null
    stamina: number | null
    mana: number | null
    level: number | null
    xp: number | null
    gold: number | null
    identity: Gender | null
    breed: Races | null
    class: Classes | null
    skill: Skills | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AvatarCountAggregateOutputType = {
    id: number
    nick: number
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: number
    breed: number
    class: number
    skill: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AvatarAvgAggregateInputType = {
    id?: true
    stamina?: true
    mana?: true
    level?: true
    xp?: true
    gold?: true
    userId?: true
  }

  export type AvatarSumAggregateInputType = {
    id?: true
    stamina?: true
    mana?: true
    level?: true
    xp?: true
    gold?: true
    userId?: true
  }

  export type AvatarMinAggregateInputType = {
    id?: true
    nick?: true
    stamina?: true
    mana?: true
    level?: true
    xp?: true
    gold?: true
    identity?: true
    breed?: true
    class?: true
    skill?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AvatarMaxAggregateInputType = {
    id?: true
    nick?: true
    stamina?: true
    mana?: true
    level?: true
    xp?: true
    gold?: true
    identity?: true
    breed?: true
    class?: true
    skill?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AvatarCountAggregateInputType = {
    id?: true
    nick?: true
    stamina?: true
    mana?: true
    level?: true
    xp?: true
    gold?: true
    identity?: true
    breed?: true
    class?: true
    skill?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AvatarAggregateArgs = {
    /**
     * Filter which Avatar to aggregate.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: Enumerable<AvatarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Avatars
    **/
    _count?: true | AvatarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvatarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvatarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvatarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvatarMaxAggregateInputType
  }

  export type GetAvatarAggregateType<T extends AvatarAggregateArgs> = {
        [P in keyof T & keyof AggregateAvatar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvatar[P]>
      : GetScalarType<T[P], AggregateAvatar[P]>
  }




  export type AvatarGroupByArgs = {
    where?: AvatarWhereInput
    orderBy?: Enumerable<AvatarOrderByWithAggregationInput>
    by: AvatarScalarFieldEnum[]
    having?: AvatarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvatarCountAggregateInputType | true
    _avg?: AvatarAvgAggregateInputType
    _sum?: AvatarSumAggregateInputType
    _min?: AvatarMinAggregateInputType
    _max?: AvatarMaxAggregateInputType
  }


  export type AvatarGroupByOutputType = {
    id: number
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: AvatarCountAggregateOutputType | null
    _avg: AvatarAvgAggregateOutputType | null
    _sum: AvatarSumAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  type GetAvatarGroupByPayload<T extends AvatarGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AvatarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvatarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvatarGroupByOutputType[P]>
            : GetScalarType<T[P], AvatarGroupByOutputType[P]>
        }
      >
    >


  export type AvatarSelect = {
    id?: boolean
    nick?: boolean
    stamina?: boolean
    mana?: boolean
    level?: boolean
    xp?: boolean
    gold?: boolean
    identity?: boolean
    breed?: boolean
    class?: boolean
    skill?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    createdAt?: boolean
    updatedAt?: boolean
    EquipItem?: boolean | Avatar$EquipItemArgs
    AvatarGame?: boolean | Avatar$AvatarGameArgs
    _count?: boolean | AvatarCountOutputTypeArgs
  }


  export type AvatarInclude = {
    User?: boolean | UserArgs
    EquipItem?: boolean | Avatar$EquipItemArgs
    AvatarGame?: boolean | Avatar$AvatarGameArgs
    _count?: boolean | AvatarCountOutputTypeArgs
  }

  export type AvatarGetPayload<S extends boolean | null | undefined | AvatarArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Avatar :
    S extends undefined ? never :
    S extends { include: any } & (AvatarArgs | AvatarFindManyArgs)
    ? Avatar  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'EquipItem' ? Array < EquipItemGetPayload<S['include'][P]>>  :
        P extends 'AvatarGame' ? Array < AvatarGameGetPayload<S['include'][P]>>  :
        P extends '_count' ? AvatarCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AvatarArgs | AvatarFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'EquipItem' ? Array < EquipItemGetPayload<S['select'][P]>>  :
        P extends 'AvatarGame' ? Array < AvatarGameGetPayload<S['select'][P]>>  :
        P extends '_count' ? AvatarCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Avatar ? Avatar[P] : never
  } 
      : Avatar


  type AvatarCountArgs = 
    Omit<AvatarFindManyArgs, 'select' | 'include'> & {
      select?: AvatarCountAggregateInputType | true
    }

  export interface AvatarDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Avatar that matches the filter.
     * @param {AvatarFindUniqueArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AvatarFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AvatarFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Avatar'> extends True ? Prisma__AvatarClient<AvatarGetPayload<T>> : Prisma__AvatarClient<AvatarGetPayload<T> | null, null>

    /**
     * Find one Avatar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AvatarFindUniqueOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AvatarFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AvatarFindUniqueOrThrowArgs>
    ): Prisma__AvatarClient<AvatarGetPayload<T>>

    /**
     * Find the first Avatar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindFirstArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AvatarFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AvatarFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Avatar'> extends True ? Prisma__AvatarClient<AvatarGetPayload<T>> : Prisma__AvatarClient<AvatarGetPayload<T> | null, null>

    /**
     * Find the first Avatar that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindFirstOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AvatarFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AvatarFindFirstOrThrowArgs>
    ): Prisma__AvatarClient<AvatarGetPayload<T>>

    /**
     * Find zero or more Avatars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avatars
     * const avatars = await prisma.avatar.findMany()
     * 
     * // Get first 10 Avatars
     * const avatars = await prisma.avatar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const avatarWithIdOnly = await prisma.avatar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AvatarFindManyArgs>(
      args?: SelectSubset<T, AvatarFindManyArgs>
    ): PrismaPromise<Array<AvatarGetPayload<T>>>

    /**
     * Create a Avatar.
     * @param {AvatarCreateArgs} args - Arguments to create a Avatar.
     * @example
     * // Create one Avatar
     * const Avatar = await prisma.avatar.create({
     *   data: {
     *     // ... data to create a Avatar
     *   }
     * })
     * 
    **/
    create<T extends AvatarCreateArgs>(
      args: SelectSubset<T, AvatarCreateArgs>
    ): Prisma__AvatarClient<AvatarGetPayload<T>>

    /**
     * Create many Avatars.
     *     @param {AvatarCreateManyArgs} args - Arguments to create many Avatars.
     *     @example
     *     // Create many Avatars
     *     const avatar = await prisma.avatar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AvatarCreateManyArgs>(
      args?: SelectSubset<T, AvatarCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Avatar.
     * @param {AvatarDeleteArgs} args - Arguments to delete one Avatar.
     * @example
     * // Delete one Avatar
     * const Avatar = await prisma.avatar.delete({
     *   where: {
     *     // ... filter to delete one Avatar
     *   }
     * })
     * 
    **/
    delete<T extends AvatarDeleteArgs>(
      args: SelectSubset<T, AvatarDeleteArgs>
    ): Prisma__AvatarClient<AvatarGetPayload<T>>

    /**
     * Update one Avatar.
     * @param {AvatarUpdateArgs} args - Arguments to update one Avatar.
     * @example
     * // Update one Avatar
     * const avatar = await prisma.avatar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AvatarUpdateArgs>(
      args: SelectSubset<T, AvatarUpdateArgs>
    ): Prisma__AvatarClient<AvatarGetPayload<T>>

    /**
     * Delete zero or more Avatars.
     * @param {AvatarDeleteManyArgs} args - Arguments to filter Avatars to delete.
     * @example
     * // Delete a few Avatars
     * const { count } = await prisma.avatar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AvatarDeleteManyArgs>(
      args?: SelectSubset<T, AvatarDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avatars
     * const avatar = await prisma.avatar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AvatarUpdateManyArgs>(
      args: SelectSubset<T, AvatarUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Avatar.
     * @param {AvatarUpsertArgs} args - Arguments to update or create a Avatar.
     * @example
     * // Update or create a Avatar
     * const avatar = await prisma.avatar.upsert({
     *   create: {
     *     // ... data to create a Avatar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avatar we want to update
     *   }
     * })
    **/
    upsert<T extends AvatarUpsertArgs>(
      args: SelectSubset<T, AvatarUpsertArgs>
    ): Prisma__AvatarClient<AvatarGetPayload<T>>

    /**
     * Count the number of Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarCountArgs} args - Arguments to filter Avatars to count.
     * @example
     * // Count the number of Avatars
     * const count = await prisma.avatar.count({
     *   where: {
     *     // ... the filter for the Avatars we want to count
     *   }
     * })
    **/
    count<T extends AvatarCountArgs>(
      args?: Subset<T, AvatarCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvatarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvatarAggregateArgs>(args: Subset<T, AvatarAggregateArgs>): PrismaPromise<GetAvatarAggregateType<T>>

    /**
     * Group by Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvatarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvatarGroupByArgs['orderBy'] }
        : { orderBy?: AvatarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvatarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvatarGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Avatar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AvatarClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    EquipItem<T extends Avatar$EquipItemArgs= {}>(args?: Subset<T, Avatar$EquipItemArgs>): PrismaPromise<Array<EquipItemGetPayload<T>>| Null>;

    AvatarGame<T extends Avatar$AvatarGameArgs= {}>(args?: Subset<T, Avatar$AvatarGameArgs>): PrismaPromise<Array<AvatarGameGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Avatar base type for findUnique actions
   */
  export type AvatarFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * Filter, which Avatar to fetch.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar findUnique
   */
  export interface AvatarFindUniqueArgs extends AvatarFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Avatar findUniqueOrThrow
   */
  export type AvatarFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * Filter, which Avatar to fetch.
     */
    where: AvatarWhereUniqueInput
  }


  /**
   * Avatar base type for findFirst actions
   */
  export type AvatarFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * Filter, which Avatar to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: Enumerable<AvatarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avatars.
     */
    distinct?: Enumerable<AvatarScalarFieldEnum>
  }

  /**
   * Avatar findFirst
   */
  export interface AvatarFindFirstArgs extends AvatarFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Avatar findFirstOrThrow
   */
  export type AvatarFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * Filter, which Avatar to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: Enumerable<AvatarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avatars.
     */
    distinct?: Enumerable<AvatarScalarFieldEnum>
  }


  /**
   * Avatar findMany
   */
  export type AvatarFindManyArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * Filter, which Avatars to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: Enumerable<AvatarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    distinct?: Enumerable<AvatarScalarFieldEnum>
  }


  /**
   * Avatar create
   */
  export type AvatarCreateArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * The data needed to create a Avatar.
     */
    data: XOR<AvatarCreateInput, AvatarUncheckedCreateInput>
  }


  /**
   * Avatar createMany
   */
  export type AvatarCreateManyArgs = {
    /**
     * The data used to create many Avatars.
     */
    data: Enumerable<AvatarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Avatar update
   */
  export type AvatarUpdateArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * The data needed to update a Avatar.
     */
    data: XOR<AvatarUpdateInput, AvatarUncheckedUpdateInput>
    /**
     * Choose, which Avatar to update.
     */
    where: AvatarWhereUniqueInput
  }


  /**
   * Avatar updateMany
   */
  export type AvatarUpdateManyArgs = {
    /**
     * The data used to update Avatars.
     */
    data: XOR<AvatarUpdateManyMutationInput, AvatarUncheckedUpdateManyInput>
    /**
     * Filter which Avatars to update
     */
    where?: AvatarWhereInput
  }


  /**
   * Avatar upsert
   */
  export type AvatarUpsertArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * The filter to search for the Avatar to update in case it exists.
     */
    where: AvatarWhereUniqueInput
    /**
     * In case the Avatar found by the `where` argument doesn't exist, create a new Avatar with this data.
     */
    create: XOR<AvatarCreateInput, AvatarUncheckedCreateInput>
    /**
     * In case the Avatar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvatarUpdateInput, AvatarUncheckedUpdateInput>
  }


  /**
   * Avatar delete
   */
  export type AvatarDeleteArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
    /**
     * Filter which Avatar to delete.
     */
    where: AvatarWhereUniqueInput
  }


  /**
   * Avatar deleteMany
   */
  export type AvatarDeleteManyArgs = {
    /**
     * Filter which Avatars to delete
     */
    where?: AvatarWhereInput
  }


  /**
   * Avatar.EquipItem
   */
  export type Avatar$EquipItemArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    where?: EquipItemWhereInput
    orderBy?: Enumerable<EquipItemOrderByWithRelationInput>
    cursor?: EquipItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EquipItemScalarFieldEnum>
  }


  /**
   * Avatar.AvatarGame
   */
  export type Avatar$AvatarGameArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    where?: AvatarGameWhereInput
    orderBy?: Enumerable<AvatarGameOrderByWithRelationInput>
    cursor?: AvatarGameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AvatarGameScalarFieldEnum>
  }


  /**
   * Avatar without action
   */
  export type AvatarArgs = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude | null
  }



  /**
   * Model Game
   */


  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    level: number | null
    userId: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    level: number | null
    userId: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    name: string | null
    level: number | null
    description: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    name: string | null
    level: number | null
    description: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    level: number
    description: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    level?: true
    userId?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    level?: true
    userId?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    level?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    level?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    level?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameAggregateArgs = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs = {
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithAggregationInput>
    by: GameScalarFieldEnum[]
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }


  export type GameGroupByOutputType = {
    id: number
    name: string
    level: number
    description: string
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect = {
    id?: boolean
    name?: boolean
    level?: boolean
    description?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    createdAt?: boolean
    updatedAt?: boolean
    AvatarGame?: boolean | Game$AvatarGameArgs
    GameStage?: boolean | Game$GameStageArgs
    Vote?: boolean | Game$VoteArgs
    _count?: boolean | GameCountOutputTypeArgs
  }


  export type GameInclude = {
    User?: boolean | UserArgs
    AvatarGame?: boolean | Game$AvatarGameArgs
    GameStage?: boolean | Game$GameStageArgs
    Vote?: boolean | Game$VoteArgs
    _count?: boolean | GameCountOutputTypeArgs
  }

  export type GameGetPayload<S extends boolean | null | undefined | GameArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Game :
    S extends undefined ? never :
    S extends { include: any } & (GameArgs | GameFindManyArgs)
    ? Game  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'AvatarGame' ? Array < AvatarGameGetPayload<S['include'][P]>>  :
        P extends 'GameStage' ? Array < GameStageGetPayload<S['include'][P]>>  :
        P extends 'Vote' ? Array < VoteGetPayload<S['include'][P]>>  :
        P extends '_count' ? GameCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GameArgs | GameFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'AvatarGame' ? Array < AvatarGameGetPayload<S['select'][P]>>  :
        P extends 'GameStage' ? Array < GameStageGetPayload<S['select'][P]>>  :
        P extends 'Vote' ? Array < VoteGetPayload<S['select'][P]>>  :
        P extends '_count' ? GameCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Game ? Game[P] : never
  } 
      : Game


  type GameCountArgs = 
    Omit<GameFindManyArgs, 'select' | 'include'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Game'> extends True ? Prisma__GameClient<GameGetPayload<T>> : Prisma__GameClient<GameGetPayload<T> | null, null>

    /**
     * Find one Game that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GameFindUniqueOrThrowArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Game'> extends True ? Prisma__GameClient<GameGetPayload<T>> : Prisma__GameClient<GameGetPayload<T> | null, null>

    /**
     * Find the first Game that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GameFindFirstOrThrowArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GameFindManyArgs>(
      args?: SelectSubset<T, GameFindManyArgs>
    ): PrismaPromise<Array<GameGetPayload<T>>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends GameCreateArgs>(
      args: SelectSubset<T, GameCreateArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Create many Games.
     *     @param {GameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameCreateManyArgs>(
      args?: SelectSubset<T, GameCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends GameDeleteArgs>(
      args: SelectSubset<T, GameDeleteArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameUpdateArgs>(
      args: SelectSubset<T, GameUpdateArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameDeleteManyArgs>(
      args?: SelectSubset<T, GameDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameUpdateManyArgs>(
      args: SelectSubset<T, GameUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends GameUpsertArgs>(
      args: SelectSubset<T, GameUpsertArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    AvatarGame<T extends Game$AvatarGameArgs= {}>(args?: Subset<T, Game$AvatarGameArgs>): PrismaPromise<Array<AvatarGameGetPayload<T>>| Null>;

    GameStage<T extends Game$GameStageArgs= {}>(args?: Subset<T, Game$GameStageArgs>): PrismaPromise<Array<GameStageGetPayload<T>>| Null>;

    Vote<T extends Game$VoteArgs= {}>(args?: Subset<T, Game$VoteArgs>): PrismaPromise<Array<VoteGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Game base type for findUnique actions
   */
  export type GameFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUnique
   */
  export interface GameFindUniqueArgs extends GameFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game base type for findFirst actions
   */
  export type GameFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: Enumerable<GameScalarFieldEnum>
  }

  /**
   * Game findFirst
   */
  export interface GameFindFirstArgs extends GameFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game findMany
   */
  export type GameFindManyArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game create
   */
  export type GameCreateArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }


  /**
   * Game createMany
   */
  export type GameCreateManyArgs = {
    /**
     * The data used to create many Games.
     */
    data: Enumerable<GameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Game update
   */
  export type GameUpdateArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }


  /**
   * Game upsert
   */
  export type GameUpsertArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }


  /**
   * Game delete
   */
  export type GameDeleteArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }


  /**
   * Game.AvatarGame
   */
  export type Game$AvatarGameArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    where?: AvatarGameWhereInput
    orderBy?: Enumerable<AvatarGameOrderByWithRelationInput>
    cursor?: AvatarGameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AvatarGameScalarFieldEnum>
  }


  /**
   * Game.GameStage
   */
  export type Game$GameStageArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    where?: GameStageWhereInput
    orderBy?: Enumerable<GameStageOrderByWithRelationInput>
    cursor?: GameStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameStageScalarFieldEnum>
  }


  /**
   * Game.Vote
   */
  export type Game$VoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    where?: VoteWhereInput
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * Game without action
   */
  export type GameArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
  }



  /**
   * Model AvatarGame
   */


  export type AggregateAvatarGame = {
    _count: AvatarGameCountAggregateOutputType | null
    _avg: AvatarGameAvgAggregateOutputType | null
    _sum: AvatarGameSumAggregateOutputType | null
    _min: AvatarGameMinAggregateOutputType | null
    _max: AvatarGameMaxAggregateOutputType | null
  }

  export type AvatarGameAvgAggregateOutputType = {
    id: number | null
    position: number | null
    avatarId: number | null
    gameId: number | null
  }

  export type AvatarGameSumAggregateOutputType = {
    id: number | null
    position: number | null
    avatarId: number | null
    gameId: number | null
  }

  export type AvatarGameMinAggregateOutputType = {
    id: number | null
    stage: string | null
    finished: boolean | null
    position: number | null
    skill: boolean | null
    avatarId: number | null
    gameId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AvatarGameMaxAggregateOutputType = {
    id: number | null
    stage: string | null
    finished: boolean | null
    position: number | null
    skill: boolean | null
    avatarId: number | null
    gameId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AvatarGameCountAggregateOutputType = {
    id: number
    stage: number
    finished: number
    position: number
    skill: number
    avatarId: number
    gameId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AvatarGameAvgAggregateInputType = {
    id?: true
    position?: true
    avatarId?: true
    gameId?: true
  }

  export type AvatarGameSumAggregateInputType = {
    id?: true
    position?: true
    avatarId?: true
    gameId?: true
  }

  export type AvatarGameMinAggregateInputType = {
    id?: true
    stage?: true
    finished?: true
    position?: true
    skill?: true
    avatarId?: true
    gameId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AvatarGameMaxAggregateInputType = {
    id?: true
    stage?: true
    finished?: true
    position?: true
    skill?: true
    avatarId?: true
    gameId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AvatarGameCountAggregateInputType = {
    id?: true
    stage?: true
    finished?: true
    position?: true
    skill?: true
    avatarId?: true
    gameId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AvatarGameAggregateArgs = {
    /**
     * Filter which AvatarGame to aggregate.
     */
    where?: AvatarGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvatarGames to fetch.
     */
    orderBy?: Enumerable<AvatarGameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvatarGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvatarGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvatarGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AvatarGames
    **/
    _count?: true | AvatarGameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvatarGameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvatarGameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvatarGameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvatarGameMaxAggregateInputType
  }

  export type GetAvatarGameAggregateType<T extends AvatarGameAggregateArgs> = {
        [P in keyof T & keyof AggregateAvatarGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvatarGame[P]>
      : GetScalarType<T[P], AggregateAvatarGame[P]>
  }




  export type AvatarGameGroupByArgs = {
    where?: AvatarGameWhereInput
    orderBy?: Enumerable<AvatarGameOrderByWithAggregationInput>
    by: AvatarGameScalarFieldEnum[]
    having?: AvatarGameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvatarGameCountAggregateInputType | true
    _avg?: AvatarGameAvgAggregateInputType
    _sum?: AvatarGameSumAggregateInputType
    _min?: AvatarGameMinAggregateInputType
    _max?: AvatarGameMaxAggregateInputType
  }


  export type AvatarGameGroupByOutputType = {
    id: number
    stage: string
    finished: boolean
    position: number
    skill: boolean
    avatarId: number
    gameId: number
    createdAt: Date
    updatedAt: Date
    _count: AvatarGameCountAggregateOutputType | null
    _avg: AvatarGameAvgAggregateOutputType | null
    _sum: AvatarGameSumAggregateOutputType | null
    _min: AvatarGameMinAggregateOutputType | null
    _max: AvatarGameMaxAggregateOutputType | null
  }

  type GetAvatarGameGroupByPayload<T extends AvatarGameGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AvatarGameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvatarGameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvatarGameGroupByOutputType[P]>
            : GetScalarType<T[P], AvatarGameGroupByOutputType[P]>
        }
      >
    >


  export type AvatarGameSelect = {
    id?: boolean
    stage?: boolean
    finished?: boolean
    position?: boolean
    skill?: boolean
    avatarId?: boolean
    Avatar?: boolean | AvatarArgs
    gameId?: boolean
    Game?: boolean | GameArgs
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type AvatarGameInclude = {
    Avatar?: boolean | AvatarArgs
    Game?: boolean | GameArgs
  }

  export type AvatarGameGetPayload<S extends boolean | null | undefined | AvatarGameArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AvatarGame :
    S extends undefined ? never :
    S extends { include: any } & (AvatarGameArgs | AvatarGameFindManyArgs)
    ? AvatarGame  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Avatar' ? AvatarGetPayload<S['include'][P]> :
        P extends 'Game' ? GameGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AvatarGameArgs | AvatarGameFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Avatar' ? AvatarGetPayload<S['select'][P]> :
        P extends 'Game' ? GameGetPayload<S['select'][P]> :  P extends keyof AvatarGame ? AvatarGame[P] : never
  } 
      : AvatarGame


  type AvatarGameCountArgs = 
    Omit<AvatarGameFindManyArgs, 'select' | 'include'> & {
      select?: AvatarGameCountAggregateInputType | true
    }

  export interface AvatarGameDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one AvatarGame that matches the filter.
     * @param {AvatarGameFindUniqueArgs} args - Arguments to find a AvatarGame
     * @example
     * // Get one AvatarGame
     * const avatarGame = await prisma.avatarGame.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AvatarGameFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AvatarGameFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AvatarGame'> extends True ? Prisma__AvatarGameClient<AvatarGameGetPayload<T>> : Prisma__AvatarGameClient<AvatarGameGetPayload<T> | null, null>

    /**
     * Find one AvatarGame that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AvatarGameFindUniqueOrThrowArgs} args - Arguments to find a AvatarGame
     * @example
     * // Get one AvatarGame
     * const avatarGame = await prisma.avatarGame.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AvatarGameFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AvatarGameFindUniqueOrThrowArgs>
    ): Prisma__AvatarGameClient<AvatarGameGetPayload<T>>

    /**
     * Find the first AvatarGame that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGameFindFirstArgs} args - Arguments to find a AvatarGame
     * @example
     * // Get one AvatarGame
     * const avatarGame = await prisma.avatarGame.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AvatarGameFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AvatarGameFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AvatarGame'> extends True ? Prisma__AvatarGameClient<AvatarGameGetPayload<T>> : Prisma__AvatarGameClient<AvatarGameGetPayload<T> | null, null>

    /**
     * Find the first AvatarGame that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGameFindFirstOrThrowArgs} args - Arguments to find a AvatarGame
     * @example
     * // Get one AvatarGame
     * const avatarGame = await prisma.avatarGame.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AvatarGameFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AvatarGameFindFirstOrThrowArgs>
    ): Prisma__AvatarGameClient<AvatarGameGetPayload<T>>

    /**
     * Find zero or more AvatarGames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AvatarGames
     * const avatarGames = await prisma.avatarGame.findMany()
     * 
     * // Get first 10 AvatarGames
     * const avatarGames = await prisma.avatarGame.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const avatarGameWithIdOnly = await prisma.avatarGame.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AvatarGameFindManyArgs>(
      args?: SelectSubset<T, AvatarGameFindManyArgs>
    ): PrismaPromise<Array<AvatarGameGetPayload<T>>>

    /**
     * Create a AvatarGame.
     * @param {AvatarGameCreateArgs} args - Arguments to create a AvatarGame.
     * @example
     * // Create one AvatarGame
     * const AvatarGame = await prisma.avatarGame.create({
     *   data: {
     *     // ... data to create a AvatarGame
     *   }
     * })
     * 
    **/
    create<T extends AvatarGameCreateArgs>(
      args: SelectSubset<T, AvatarGameCreateArgs>
    ): Prisma__AvatarGameClient<AvatarGameGetPayload<T>>

    /**
     * Create many AvatarGames.
     *     @param {AvatarGameCreateManyArgs} args - Arguments to create many AvatarGames.
     *     @example
     *     // Create many AvatarGames
     *     const avatarGame = await prisma.avatarGame.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AvatarGameCreateManyArgs>(
      args?: SelectSubset<T, AvatarGameCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a AvatarGame.
     * @param {AvatarGameDeleteArgs} args - Arguments to delete one AvatarGame.
     * @example
     * // Delete one AvatarGame
     * const AvatarGame = await prisma.avatarGame.delete({
     *   where: {
     *     // ... filter to delete one AvatarGame
     *   }
     * })
     * 
    **/
    delete<T extends AvatarGameDeleteArgs>(
      args: SelectSubset<T, AvatarGameDeleteArgs>
    ): Prisma__AvatarGameClient<AvatarGameGetPayload<T>>

    /**
     * Update one AvatarGame.
     * @param {AvatarGameUpdateArgs} args - Arguments to update one AvatarGame.
     * @example
     * // Update one AvatarGame
     * const avatarGame = await prisma.avatarGame.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AvatarGameUpdateArgs>(
      args: SelectSubset<T, AvatarGameUpdateArgs>
    ): Prisma__AvatarGameClient<AvatarGameGetPayload<T>>

    /**
     * Delete zero or more AvatarGames.
     * @param {AvatarGameDeleteManyArgs} args - Arguments to filter AvatarGames to delete.
     * @example
     * // Delete a few AvatarGames
     * const { count } = await prisma.avatarGame.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AvatarGameDeleteManyArgs>(
      args?: SelectSubset<T, AvatarGameDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more AvatarGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AvatarGames
     * const avatarGame = await prisma.avatarGame.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AvatarGameUpdateManyArgs>(
      args: SelectSubset<T, AvatarGameUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one AvatarGame.
     * @param {AvatarGameUpsertArgs} args - Arguments to update or create a AvatarGame.
     * @example
     * // Update or create a AvatarGame
     * const avatarGame = await prisma.avatarGame.upsert({
     *   create: {
     *     // ... data to create a AvatarGame
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AvatarGame we want to update
     *   }
     * })
    **/
    upsert<T extends AvatarGameUpsertArgs>(
      args: SelectSubset<T, AvatarGameUpsertArgs>
    ): Prisma__AvatarGameClient<AvatarGameGetPayload<T>>

    /**
     * Count the number of AvatarGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGameCountArgs} args - Arguments to filter AvatarGames to count.
     * @example
     * // Count the number of AvatarGames
     * const count = await prisma.avatarGame.count({
     *   where: {
     *     // ... the filter for the AvatarGames we want to count
     *   }
     * })
    **/
    count<T extends AvatarGameCountArgs>(
      args?: Subset<T, AvatarGameCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvatarGameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AvatarGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvatarGameAggregateArgs>(args: Subset<T, AvatarGameAggregateArgs>): PrismaPromise<GetAvatarGameAggregateType<T>>

    /**
     * Group by AvatarGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvatarGameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvatarGameGroupByArgs['orderBy'] }
        : { orderBy?: AvatarGameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvatarGameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvatarGameGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AvatarGame.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AvatarGameClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Avatar<T extends AvatarArgs= {}>(args?: Subset<T, AvatarArgs>): Prisma__AvatarClient<AvatarGetPayload<T> | Null>;

    Game<T extends GameArgs= {}>(args?: Subset<T, GameArgs>): Prisma__GameClient<GameGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AvatarGame base type for findUnique actions
   */
  export type AvatarGameFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * Filter, which AvatarGame to fetch.
     */
    where: AvatarGameWhereUniqueInput
  }

  /**
   * AvatarGame findUnique
   */
  export interface AvatarGameFindUniqueArgs extends AvatarGameFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AvatarGame findUniqueOrThrow
   */
  export type AvatarGameFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * Filter, which AvatarGame to fetch.
     */
    where: AvatarGameWhereUniqueInput
  }


  /**
   * AvatarGame base type for findFirst actions
   */
  export type AvatarGameFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * Filter, which AvatarGame to fetch.
     */
    where?: AvatarGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvatarGames to fetch.
     */
    orderBy?: Enumerable<AvatarGameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AvatarGames.
     */
    cursor?: AvatarGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvatarGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvatarGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AvatarGames.
     */
    distinct?: Enumerable<AvatarGameScalarFieldEnum>
  }

  /**
   * AvatarGame findFirst
   */
  export interface AvatarGameFindFirstArgs extends AvatarGameFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AvatarGame findFirstOrThrow
   */
  export type AvatarGameFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * Filter, which AvatarGame to fetch.
     */
    where?: AvatarGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvatarGames to fetch.
     */
    orderBy?: Enumerable<AvatarGameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AvatarGames.
     */
    cursor?: AvatarGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvatarGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvatarGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AvatarGames.
     */
    distinct?: Enumerable<AvatarGameScalarFieldEnum>
  }


  /**
   * AvatarGame findMany
   */
  export type AvatarGameFindManyArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * Filter, which AvatarGames to fetch.
     */
    where?: AvatarGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvatarGames to fetch.
     */
    orderBy?: Enumerable<AvatarGameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AvatarGames.
     */
    cursor?: AvatarGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvatarGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvatarGames.
     */
    skip?: number
    distinct?: Enumerable<AvatarGameScalarFieldEnum>
  }


  /**
   * AvatarGame create
   */
  export type AvatarGameCreateArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * The data needed to create a AvatarGame.
     */
    data: XOR<AvatarGameCreateInput, AvatarGameUncheckedCreateInput>
  }


  /**
   * AvatarGame createMany
   */
  export type AvatarGameCreateManyArgs = {
    /**
     * The data used to create many AvatarGames.
     */
    data: Enumerable<AvatarGameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AvatarGame update
   */
  export type AvatarGameUpdateArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * The data needed to update a AvatarGame.
     */
    data: XOR<AvatarGameUpdateInput, AvatarGameUncheckedUpdateInput>
    /**
     * Choose, which AvatarGame to update.
     */
    where: AvatarGameWhereUniqueInput
  }


  /**
   * AvatarGame updateMany
   */
  export type AvatarGameUpdateManyArgs = {
    /**
     * The data used to update AvatarGames.
     */
    data: XOR<AvatarGameUpdateManyMutationInput, AvatarGameUncheckedUpdateManyInput>
    /**
     * Filter which AvatarGames to update
     */
    where?: AvatarGameWhereInput
  }


  /**
   * AvatarGame upsert
   */
  export type AvatarGameUpsertArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * The filter to search for the AvatarGame to update in case it exists.
     */
    where: AvatarGameWhereUniqueInput
    /**
     * In case the AvatarGame found by the `where` argument doesn't exist, create a new AvatarGame with this data.
     */
    create: XOR<AvatarGameCreateInput, AvatarGameUncheckedCreateInput>
    /**
     * In case the AvatarGame was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvatarGameUpdateInput, AvatarGameUncheckedUpdateInput>
  }


  /**
   * AvatarGame delete
   */
  export type AvatarGameDeleteArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
    /**
     * Filter which AvatarGame to delete.
     */
    where: AvatarGameWhereUniqueInput
  }


  /**
   * AvatarGame deleteMany
   */
  export type AvatarGameDeleteManyArgs = {
    /**
     * Filter which AvatarGames to delete
     */
    where?: AvatarGameWhereInput
  }


  /**
   * AvatarGame without action
   */
  export type AvatarGameArgs = {
    /**
     * Select specific fields to fetch from the AvatarGame
     */
    select?: AvatarGameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarGameInclude | null
  }



  /**
   * Model Stage
   */


  export type AggregateStage = {
    _count: StageCountAggregateOutputType | null
    _avg: StageAvgAggregateOutputType | null
    _sum: StageSumAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  export type StageAvgAggregateOutputType = {
    id: number | null
    refStageId: number | null
    userId: number | null
  }

  export type StageSumAggregateOutputType = {
    id: number | null
    refStageId: number | null
    userId: number | null
  }

  export type StageMinAggregateOutputType = {
    id: number | null
    name: string | null
    options: string | null
    description: string | null
    objects: string | null
    refStageId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StageMaxAggregateOutputType = {
    id: number | null
    name: string | null
    options: string | null
    description: string | null
    objects: string | null
    refStageId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StageCountAggregateOutputType = {
    id: number
    name: number
    options: number
    description: number
    objects: number
    refStageId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StageAvgAggregateInputType = {
    id?: true
    refStageId?: true
    userId?: true
  }

  export type StageSumAggregateInputType = {
    id?: true
    refStageId?: true
    userId?: true
  }

  export type StageMinAggregateInputType = {
    id?: true
    name?: true
    options?: true
    description?: true
    objects?: true
    refStageId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StageMaxAggregateInputType = {
    id?: true
    name?: true
    options?: true
    description?: true
    objects?: true
    refStageId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StageCountAggregateInputType = {
    id?: true
    name?: true
    options?: true
    description?: true
    objects?: true
    refStageId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StageAggregateArgs = {
    /**
     * Filter which Stage to aggregate.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: Enumerable<StageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stages
    **/
    _count?: true | StageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StageMaxAggregateInputType
  }

  export type GetStageAggregateType<T extends StageAggregateArgs> = {
        [P in keyof T & keyof AggregateStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStage[P]>
      : GetScalarType<T[P], AggregateStage[P]>
  }




  export type StageGroupByArgs = {
    where?: StageWhereInput
    orderBy?: Enumerable<StageOrderByWithAggregationInput>
    by: StageScalarFieldEnum[]
    having?: StageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StageCountAggregateInputType | true
    _avg?: StageAvgAggregateInputType
    _sum?: StageSumAggregateInputType
    _min?: StageMinAggregateInputType
    _max?: StageMaxAggregateInputType
  }


  export type StageGroupByOutputType = {
    id: number
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: StageCountAggregateOutputType | null
    _avg: StageAvgAggregateOutputType | null
    _sum: StageSumAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  type GetStageGroupByPayload<T extends StageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StageGroupByOutputType[P]>
            : GetScalarType<T[P], StageGroupByOutputType[P]>
        }
      >
    >


  export type StageSelect = {
    id?: boolean
    name?: boolean
    options?: boolean
    description?: boolean
    objects?: boolean
    refStageId?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    createdAt?: boolean
    updatedAt?: boolean
    GameStage?: boolean | Stage$GameStageArgs
    _count?: boolean | StageCountOutputTypeArgs
  }


  export type StageInclude = {
    User?: boolean | UserArgs
    GameStage?: boolean | Stage$GameStageArgs
    _count?: boolean | StageCountOutputTypeArgs
  }

  export type StageGetPayload<S extends boolean | null | undefined | StageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Stage :
    S extends undefined ? never :
    S extends { include: any } & (StageArgs | StageFindManyArgs)
    ? Stage  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'GameStage' ? Array < GameStageGetPayload<S['include'][P]>>  :
        P extends '_count' ? StageCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (StageArgs | StageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'GameStage' ? Array < GameStageGetPayload<S['select'][P]>>  :
        P extends '_count' ? StageCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Stage ? Stage[P] : never
  } 
      : Stage


  type StageCountArgs = 
    Omit<StageFindManyArgs, 'select' | 'include'> & {
      select?: StageCountAggregateInputType | true
    }

  export interface StageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Stage that matches the filter.
     * @param {StageFindUniqueArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stage'> extends True ? Prisma__StageClient<StageGetPayload<T>> : Prisma__StageClient<StageGetPayload<T> | null, null>

    /**
     * Find one Stage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StageFindUniqueOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StageFindUniqueOrThrowArgs>
    ): Prisma__StageClient<StageGetPayload<T>>

    /**
     * Find the first Stage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stage'> extends True ? Prisma__StageClient<StageGetPayload<T>> : Prisma__StageClient<StageGetPayload<T> | null, null>

    /**
     * Find the first Stage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StageFindFirstOrThrowArgs>
    ): Prisma__StageClient<StageGetPayload<T>>

    /**
     * Find zero or more Stages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stages
     * const stages = await prisma.stage.findMany()
     * 
     * // Get first 10 Stages
     * const stages = await prisma.stage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stageWithIdOnly = await prisma.stage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StageFindManyArgs>(
      args?: SelectSubset<T, StageFindManyArgs>
    ): PrismaPromise<Array<StageGetPayload<T>>>

    /**
     * Create a Stage.
     * @param {StageCreateArgs} args - Arguments to create a Stage.
     * @example
     * // Create one Stage
     * const Stage = await prisma.stage.create({
     *   data: {
     *     // ... data to create a Stage
     *   }
     * })
     * 
    **/
    create<T extends StageCreateArgs>(
      args: SelectSubset<T, StageCreateArgs>
    ): Prisma__StageClient<StageGetPayload<T>>

    /**
     * Create many Stages.
     *     @param {StageCreateManyArgs} args - Arguments to create many Stages.
     *     @example
     *     // Create many Stages
     *     const stage = await prisma.stage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StageCreateManyArgs>(
      args?: SelectSubset<T, StageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Stage.
     * @param {StageDeleteArgs} args - Arguments to delete one Stage.
     * @example
     * // Delete one Stage
     * const Stage = await prisma.stage.delete({
     *   where: {
     *     // ... filter to delete one Stage
     *   }
     * })
     * 
    **/
    delete<T extends StageDeleteArgs>(
      args: SelectSubset<T, StageDeleteArgs>
    ): Prisma__StageClient<StageGetPayload<T>>

    /**
     * Update one Stage.
     * @param {StageUpdateArgs} args - Arguments to update one Stage.
     * @example
     * // Update one Stage
     * const stage = await prisma.stage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StageUpdateArgs>(
      args: SelectSubset<T, StageUpdateArgs>
    ): Prisma__StageClient<StageGetPayload<T>>

    /**
     * Delete zero or more Stages.
     * @param {StageDeleteManyArgs} args - Arguments to filter Stages to delete.
     * @example
     * // Delete a few Stages
     * const { count } = await prisma.stage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StageDeleteManyArgs>(
      args?: SelectSubset<T, StageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StageUpdateManyArgs>(
      args: SelectSubset<T, StageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Stage.
     * @param {StageUpsertArgs} args - Arguments to update or create a Stage.
     * @example
     * // Update or create a Stage
     * const stage = await prisma.stage.upsert({
     *   create: {
     *     // ... data to create a Stage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stage we want to update
     *   }
     * })
    **/
    upsert<T extends StageUpsertArgs>(
      args: SelectSubset<T, StageUpsertArgs>
    ): Prisma__StageClient<StageGetPayload<T>>

    /**
     * Count the number of Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageCountArgs} args - Arguments to filter Stages to count.
     * @example
     * // Count the number of Stages
     * const count = await prisma.stage.count({
     *   where: {
     *     // ... the filter for the Stages we want to count
     *   }
     * })
    **/
    count<T extends StageCountArgs>(
      args?: Subset<T, StageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StageAggregateArgs>(args: Subset<T, StageAggregateArgs>): PrismaPromise<GetStageAggregateType<T>>

    /**
     * Group by Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StageGroupByArgs['orderBy'] }
        : { orderBy?: StageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStageGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Stage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StageClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    GameStage<T extends Stage$GameStageArgs= {}>(args?: Subset<T, Stage$GameStageArgs>): PrismaPromise<Array<GameStageGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Stage base type for findUnique actions
   */
  export type StageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findUnique
   */
  export interface StageFindUniqueArgs extends StageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stage findUniqueOrThrow
   */
  export type StageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }


  /**
   * Stage base type for findFirst actions
   */
  export type StageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: Enumerable<StageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: Enumerable<StageScalarFieldEnum>
  }

  /**
   * Stage findFirst
   */
  export interface StageFindFirstArgs extends StageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stage findFirstOrThrow
   */
  export type StageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: Enumerable<StageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: Enumerable<StageScalarFieldEnum>
  }


  /**
   * Stage findMany
   */
  export type StageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * Filter, which Stages to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: Enumerable<StageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    distinct?: Enumerable<StageScalarFieldEnum>
  }


  /**
   * Stage create
   */
  export type StageCreateArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * The data needed to create a Stage.
     */
    data: XOR<StageCreateInput, StageUncheckedCreateInput>
  }


  /**
   * Stage createMany
   */
  export type StageCreateManyArgs = {
    /**
     * The data used to create many Stages.
     */
    data: Enumerable<StageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stage update
   */
  export type StageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * The data needed to update a Stage.
     */
    data: XOR<StageUpdateInput, StageUncheckedUpdateInput>
    /**
     * Choose, which Stage to update.
     */
    where: StageWhereUniqueInput
  }


  /**
   * Stage updateMany
   */
  export type StageUpdateManyArgs = {
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
  }


  /**
   * Stage upsert
   */
  export type StageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * The filter to search for the Stage to update in case it exists.
     */
    where: StageWhereUniqueInput
    /**
     * In case the Stage found by the `where` argument doesn't exist, create a new Stage with this data.
     */
    create: XOR<StageCreateInput, StageUncheckedCreateInput>
    /**
     * In case the Stage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StageUpdateInput, StageUncheckedUpdateInput>
  }


  /**
   * Stage delete
   */
  export type StageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
    /**
     * Filter which Stage to delete.
     */
    where: StageWhereUniqueInput
  }


  /**
   * Stage deleteMany
   */
  export type StageDeleteManyArgs = {
    /**
     * Filter which Stages to delete
     */
    where?: StageWhereInput
  }


  /**
   * Stage.GameStage
   */
  export type Stage$GameStageArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    where?: GameStageWhereInput
    orderBy?: Enumerable<GameStageOrderByWithRelationInput>
    cursor?: GameStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameStageScalarFieldEnum>
  }


  /**
   * Stage without action
   */
  export type StageArgs = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StageInclude | null
  }



  /**
   * Model GameStage
   */


  export type AggregateGameStage = {
    _count: GameStageCountAggregateOutputType | null
    _avg: GameStageAvgAggregateOutputType | null
    _sum: GameStageSumAggregateOutputType | null
    _min: GameStageMinAggregateOutputType | null
    _max: GameStageMaxAggregateOutputType | null
  }

  export type GameStageAvgAggregateOutputType = {
    id: number | null
    position: number | null
    gameId: number | null
    stageId: number | null
  }

  export type GameStageSumAggregateOutputType = {
    id: number | null
    position: number | null
    gameId: number | null
    stageId: number | null
  }

  export type GameStageMinAggregateOutputType = {
    id: number | null
    position: number | null
    gameId: number | null
    stageId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameStageMaxAggregateOutputType = {
    id: number | null
    position: number | null
    gameId: number | null
    stageId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameStageCountAggregateOutputType = {
    id: number
    position: number
    gameId: number
    stageId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameStageAvgAggregateInputType = {
    id?: true
    position?: true
    gameId?: true
    stageId?: true
  }

  export type GameStageSumAggregateInputType = {
    id?: true
    position?: true
    gameId?: true
    stageId?: true
  }

  export type GameStageMinAggregateInputType = {
    id?: true
    position?: true
    gameId?: true
    stageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameStageMaxAggregateInputType = {
    id?: true
    position?: true
    gameId?: true
    stageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameStageCountAggregateInputType = {
    id?: true
    position?: true
    gameId?: true
    stageId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameStageAggregateArgs = {
    /**
     * Filter which GameStage to aggregate.
     */
    where?: GameStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameStages to fetch.
     */
    orderBy?: Enumerable<GameStageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameStages
    **/
    _count?: true | GameStageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameStageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameStageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameStageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameStageMaxAggregateInputType
  }

  export type GetGameStageAggregateType<T extends GameStageAggregateArgs> = {
        [P in keyof T & keyof AggregateGameStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameStage[P]>
      : GetScalarType<T[P], AggregateGameStage[P]>
  }




  export type GameStageGroupByArgs = {
    where?: GameStageWhereInput
    orderBy?: Enumerable<GameStageOrderByWithAggregationInput>
    by: GameStageScalarFieldEnum[]
    having?: GameStageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameStageCountAggregateInputType | true
    _avg?: GameStageAvgAggregateInputType
    _sum?: GameStageSumAggregateInputType
    _min?: GameStageMinAggregateInputType
    _max?: GameStageMaxAggregateInputType
  }


  export type GameStageGroupByOutputType = {
    id: number
    position: number
    gameId: number
    stageId: number
    createdAt: Date
    updatedAt: Date
    _count: GameStageCountAggregateOutputType | null
    _avg: GameStageAvgAggregateOutputType | null
    _sum: GameStageSumAggregateOutputType | null
    _min: GameStageMinAggregateOutputType | null
    _max: GameStageMaxAggregateOutputType | null
  }

  type GetGameStageGroupByPayload<T extends GameStageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GameStageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameStageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameStageGroupByOutputType[P]>
            : GetScalarType<T[P], GameStageGroupByOutputType[P]>
        }
      >
    >


  export type GameStageSelect = {
    id?: boolean
    position?: boolean
    gameId?: boolean
    Game?: boolean | GameArgs
    stageId?: boolean
    Stage?: boolean | StageArgs
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type GameStageInclude = {
    Game?: boolean | GameArgs
    Stage?: boolean | StageArgs
  }

  export type GameStageGetPayload<S extends boolean | null | undefined | GameStageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GameStage :
    S extends undefined ? never :
    S extends { include: any } & (GameStageArgs | GameStageFindManyArgs)
    ? GameStage  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Game' ? GameGetPayload<S['include'][P]> :
        P extends 'Stage' ? StageGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GameStageArgs | GameStageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Game' ? GameGetPayload<S['select'][P]> :
        P extends 'Stage' ? StageGetPayload<S['select'][P]> :  P extends keyof GameStage ? GameStage[P] : never
  } 
      : GameStage


  type GameStageCountArgs = 
    Omit<GameStageFindManyArgs, 'select' | 'include'> & {
      select?: GameStageCountAggregateInputType | true
    }

  export interface GameStageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one GameStage that matches the filter.
     * @param {GameStageFindUniqueArgs} args - Arguments to find a GameStage
     * @example
     * // Get one GameStage
     * const gameStage = await prisma.gameStage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameStageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameStageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GameStage'> extends True ? Prisma__GameStageClient<GameStageGetPayload<T>> : Prisma__GameStageClient<GameStageGetPayload<T> | null, null>

    /**
     * Find one GameStage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameStageFindUniqueOrThrowArgs} args - Arguments to find a GameStage
     * @example
     * // Get one GameStage
     * const gameStage = await prisma.gameStage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameStageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GameStageFindUniqueOrThrowArgs>
    ): Prisma__GameStageClient<GameStageGetPayload<T>>

    /**
     * Find the first GameStage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameStageFindFirstArgs} args - Arguments to find a GameStage
     * @example
     * // Get one GameStage
     * const gameStage = await prisma.gameStage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameStageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameStageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GameStage'> extends True ? Prisma__GameStageClient<GameStageGetPayload<T>> : Prisma__GameStageClient<GameStageGetPayload<T> | null, null>

    /**
     * Find the first GameStage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameStageFindFirstOrThrowArgs} args - Arguments to find a GameStage
     * @example
     * // Get one GameStage
     * const gameStage = await prisma.gameStage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameStageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GameStageFindFirstOrThrowArgs>
    ): Prisma__GameStageClient<GameStageGetPayload<T>>

    /**
     * Find zero or more GameStages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameStageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameStages
     * const gameStages = await prisma.gameStage.findMany()
     * 
     * // Get first 10 GameStages
     * const gameStages = await prisma.gameStage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameStageWithIdOnly = await prisma.gameStage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GameStageFindManyArgs>(
      args?: SelectSubset<T, GameStageFindManyArgs>
    ): PrismaPromise<Array<GameStageGetPayload<T>>>

    /**
     * Create a GameStage.
     * @param {GameStageCreateArgs} args - Arguments to create a GameStage.
     * @example
     * // Create one GameStage
     * const GameStage = await prisma.gameStage.create({
     *   data: {
     *     // ... data to create a GameStage
     *   }
     * })
     * 
    **/
    create<T extends GameStageCreateArgs>(
      args: SelectSubset<T, GameStageCreateArgs>
    ): Prisma__GameStageClient<GameStageGetPayload<T>>

    /**
     * Create many GameStages.
     *     @param {GameStageCreateManyArgs} args - Arguments to create many GameStages.
     *     @example
     *     // Create many GameStages
     *     const gameStage = await prisma.gameStage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameStageCreateManyArgs>(
      args?: SelectSubset<T, GameStageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GameStage.
     * @param {GameStageDeleteArgs} args - Arguments to delete one GameStage.
     * @example
     * // Delete one GameStage
     * const GameStage = await prisma.gameStage.delete({
     *   where: {
     *     // ... filter to delete one GameStage
     *   }
     * })
     * 
    **/
    delete<T extends GameStageDeleteArgs>(
      args: SelectSubset<T, GameStageDeleteArgs>
    ): Prisma__GameStageClient<GameStageGetPayload<T>>

    /**
     * Update one GameStage.
     * @param {GameStageUpdateArgs} args - Arguments to update one GameStage.
     * @example
     * // Update one GameStage
     * const gameStage = await prisma.gameStage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameStageUpdateArgs>(
      args: SelectSubset<T, GameStageUpdateArgs>
    ): Prisma__GameStageClient<GameStageGetPayload<T>>

    /**
     * Delete zero or more GameStages.
     * @param {GameStageDeleteManyArgs} args - Arguments to filter GameStages to delete.
     * @example
     * // Delete a few GameStages
     * const { count } = await prisma.gameStage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameStageDeleteManyArgs>(
      args?: SelectSubset<T, GameStageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameStageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameStages
     * const gameStage = await prisma.gameStage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameStageUpdateManyArgs>(
      args: SelectSubset<T, GameStageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GameStage.
     * @param {GameStageUpsertArgs} args - Arguments to update or create a GameStage.
     * @example
     * // Update or create a GameStage
     * const gameStage = await prisma.gameStage.upsert({
     *   create: {
     *     // ... data to create a GameStage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameStage we want to update
     *   }
     * })
    **/
    upsert<T extends GameStageUpsertArgs>(
      args: SelectSubset<T, GameStageUpsertArgs>
    ): Prisma__GameStageClient<GameStageGetPayload<T>>

    /**
     * Count the number of GameStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameStageCountArgs} args - Arguments to filter GameStages to count.
     * @example
     * // Count the number of GameStages
     * const count = await prisma.gameStage.count({
     *   where: {
     *     // ... the filter for the GameStages we want to count
     *   }
     * })
    **/
    count<T extends GameStageCountArgs>(
      args?: Subset<T, GameStageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameStageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameStageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameStageAggregateArgs>(args: Subset<T, GameStageAggregateArgs>): PrismaPromise<GetGameStageAggregateType<T>>

    /**
     * Group by GameStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameStageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameStageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameStageGroupByArgs['orderBy'] }
        : { orderBy?: GameStageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameStageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameStageGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GameStage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameStageClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Game<T extends GameArgs= {}>(args?: Subset<T, GameArgs>): Prisma__GameClient<GameGetPayload<T> | Null>;

    Stage<T extends StageArgs= {}>(args?: Subset<T, StageArgs>): Prisma__StageClient<StageGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GameStage base type for findUnique actions
   */
  export type GameStageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * Filter, which GameStage to fetch.
     */
    where: GameStageWhereUniqueInput
  }

  /**
   * GameStage findUnique
   */
  export interface GameStageFindUniqueArgs extends GameStageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GameStage findUniqueOrThrow
   */
  export type GameStageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * Filter, which GameStage to fetch.
     */
    where: GameStageWhereUniqueInput
  }


  /**
   * GameStage base type for findFirst actions
   */
  export type GameStageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * Filter, which GameStage to fetch.
     */
    where?: GameStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameStages to fetch.
     */
    orderBy?: Enumerable<GameStageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameStages.
     */
    cursor?: GameStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameStages.
     */
    distinct?: Enumerable<GameStageScalarFieldEnum>
  }

  /**
   * GameStage findFirst
   */
  export interface GameStageFindFirstArgs extends GameStageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GameStage findFirstOrThrow
   */
  export type GameStageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * Filter, which GameStage to fetch.
     */
    where?: GameStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameStages to fetch.
     */
    orderBy?: Enumerable<GameStageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameStages.
     */
    cursor?: GameStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameStages.
     */
    distinct?: Enumerable<GameStageScalarFieldEnum>
  }


  /**
   * GameStage findMany
   */
  export type GameStageFindManyArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * Filter, which GameStages to fetch.
     */
    where?: GameStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameStages to fetch.
     */
    orderBy?: Enumerable<GameStageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameStages.
     */
    cursor?: GameStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameStages.
     */
    skip?: number
    distinct?: Enumerable<GameStageScalarFieldEnum>
  }


  /**
   * GameStage create
   */
  export type GameStageCreateArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * The data needed to create a GameStage.
     */
    data: XOR<GameStageCreateInput, GameStageUncheckedCreateInput>
  }


  /**
   * GameStage createMany
   */
  export type GameStageCreateManyArgs = {
    /**
     * The data used to create many GameStages.
     */
    data: Enumerable<GameStageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GameStage update
   */
  export type GameStageUpdateArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * The data needed to update a GameStage.
     */
    data: XOR<GameStageUpdateInput, GameStageUncheckedUpdateInput>
    /**
     * Choose, which GameStage to update.
     */
    where: GameStageWhereUniqueInput
  }


  /**
   * GameStage updateMany
   */
  export type GameStageUpdateManyArgs = {
    /**
     * The data used to update GameStages.
     */
    data: XOR<GameStageUpdateManyMutationInput, GameStageUncheckedUpdateManyInput>
    /**
     * Filter which GameStages to update
     */
    where?: GameStageWhereInput
  }


  /**
   * GameStage upsert
   */
  export type GameStageUpsertArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * The filter to search for the GameStage to update in case it exists.
     */
    where: GameStageWhereUniqueInput
    /**
     * In case the GameStage found by the `where` argument doesn't exist, create a new GameStage with this data.
     */
    create: XOR<GameStageCreateInput, GameStageUncheckedCreateInput>
    /**
     * In case the GameStage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameStageUpdateInput, GameStageUncheckedUpdateInput>
  }


  /**
   * GameStage delete
   */
  export type GameStageDeleteArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
    /**
     * Filter which GameStage to delete.
     */
    where: GameStageWhereUniqueInput
  }


  /**
   * GameStage deleteMany
   */
  export type GameStageDeleteManyArgs = {
    /**
     * Filter which GameStages to delete
     */
    where?: GameStageWhereInput
  }


  /**
   * GameStage without action
   */
  export type GameStageArgs = {
    /**
     * Select specific fields to fetch from the GameStage
     */
    select?: GameStageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameStageInclude | null
  }



  /**
   * Model Item
   */


  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type ItemSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    effect: string | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    effect: string | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    name: number
    type: number
    effect: number
    price: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    effect?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    effect?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    effect?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ItemAggregateArgs = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: Enumerable<ItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs = {
    where?: ItemWhereInput
    orderBy?: Enumerable<ItemOrderByWithAggregationInput>
    by: ItemScalarFieldEnum[]
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }


  export type ItemGroupByOutputType = {
    id: number
    name: string
    type: string
    effect: string
    price: number
    createdAt: Date
    updatedAt: Date
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect = {
    id?: boolean
    name?: boolean
    type?: boolean
    effect?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    UserItem?: boolean | Item$UserItemArgs
    EquipItem?: boolean | Item$EquipItemArgs
    _count?: boolean | ItemCountOutputTypeArgs
  }


  export type ItemInclude = {
    UserItem?: boolean | Item$UserItemArgs
    EquipItem?: boolean | Item$EquipItemArgs
    _count?: boolean | ItemCountOutputTypeArgs
  }

  export type ItemGetPayload<S extends boolean | null | undefined | ItemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Item :
    S extends undefined ? never :
    S extends { include: any } & (ItemArgs | ItemFindManyArgs)
    ? Item  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'UserItem' ? Array < UserItemGetPayload<S['include'][P]>>  :
        P extends 'EquipItem' ? Array < EquipItemGetPayload<S['include'][P]>>  :
        P extends '_count' ? ItemCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ItemArgs | ItemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'UserItem' ? Array < UserItemGetPayload<S['select'][P]>>  :
        P extends 'EquipItem' ? Array < EquipItemGetPayload<S['select'][P]>>  :
        P extends '_count' ? ItemCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Item ? Item[P] : never
  } 
      : Item


  type ItemCountArgs = 
    Omit<ItemFindManyArgs, 'select' | 'include'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Item'> extends True ? Prisma__ItemClient<ItemGetPayload<T>> : Prisma__ItemClient<ItemGetPayload<T> | null, null>

    /**
     * Find one Item that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ItemFindUniqueOrThrowArgs>
    ): Prisma__ItemClient<ItemGetPayload<T>>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Item'> extends True ? Prisma__ItemClient<ItemGetPayload<T>> : Prisma__ItemClient<ItemGetPayload<T> | null, null>

    /**
     * Find the first Item that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ItemFindFirstOrThrowArgs>
    ): Prisma__ItemClient<ItemGetPayload<T>>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ItemFindManyArgs>(
      args?: SelectSubset<T, ItemFindManyArgs>
    ): PrismaPromise<Array<ItemGetPayload<T>>>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
    **/
    create<T extends ItemCreateArgs>(
      args: SelectSubset<T, ItemCreateArgs>
    ): Prisma__ItemClient<ItemGetPayload<T>>

    /**
     * Create many Items.
     *     @param {ItemCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const item = await prisma.item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ItemCreateManyArgs>(
      args?: SelectSubset<T, ItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
    **/
    delete<T extends ItemDeleteArgs>(
      args: SelectSubset<T, ItemDeleteArgs>
    ): Prisma__ItemClient<ItemGetPayload<T>>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ItemUpdateArgs>(
      args: SelectSubset<T, ItemUpdateArgs>
    ): Prisma__ItemClient<ItemGetPayload<T>>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ItemDeleteManyArgs>(
      args?: SelectSubset<T, ItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ItemUpdateManyArgs>(
      args: SelectSubset<T, ItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
    **/
    upsert<T extends ItemUpsertArgs>(
      args: SelectSubset<T, ItemUpsertArgs>
    ): Prisma__ItemClient<ItemGetPayload<T>>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ItemClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    UserItem<T extends Item$UserItemArgs= {}>(args?: Subset<T, Item$UserItemArgs>): PrismaPromise<Array<UserItemGetPayload<T>>| Null>;

    EquipItem<T extends Item$EquipItemArgs= {}>(args?: Subset<T, Item$EquipItemArgs>): PrismaPromise<Array<EquipItemGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Item base type for findUnique actions
   */
  export type ItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUnique
   */
  export interface ItemFindUniqueArgs extends ItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }


  /**
   * Item base type for findFirst actions
   */
  export type ItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: Enumerable<ItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: Enumerable<ItemScalarFieldEnum>
  }

  /**
   * Item findFirst
   */
  export interface ItemFindFirstArgs extends ItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: Enumerable<ItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * Item findMany
   */
  export type ItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: Enumerable<ItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * Item create
   */
  export type ItemCreateArgs = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }


  /**
   * Item createMany
   */
  export type ItemCreateManyArgs = {
    /**
     * The data used to create many Items.
     */
    data: Enumerable<ItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Item update
   */
  export type ItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }


  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }


  /**
   * Item upsert
   */
  export type ItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }


  /**
   * Item delete
   */
  export type ItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }


  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }


  /**
   * Item.UserItem
   */
  export type Item$UserItemArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    where?: UserItemWhereInput
    orderBy?: Enumerable<UserItemOrderByWithRelationInput>
    cursor?: UserItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserItemScalarFieldEnum>
  }


  /**
   * Item.EquipItem
   */
  export type Item$EquipItemArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    where?: EquipItemWhereInput
    orderBy?: Enumerable<EquipItemOrderByWithRelationInput>
    cursor?: EquipItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EquipItemScalarFieldEnum>
  }


  /**
   * Item without action
   */
  export type ItemArgs = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude | null
  }



  /**
   * Model UserItem
   */


  export type AggregateUserItem = {
    _count: UserItemCountAggregateOutputType | null
    _avg: UserItemAvgAggregateOutputType | null
    _sum: UserItemSumAggregateOutputType | null
    _min: UserItemMinAggregateOutputType | null
    _max: UserItemMaxAggregateOutputType | null
  }

  export type UserItemAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
  }

  export type UserItemSumAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
  }

  export type UserItemMinAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserItemMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserItemCountAggregateOutputType = {
    id: number
    userId: number
    itemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserItemAvgAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
  }

  export type UserItemSumAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
  }

  export type UserItemMinAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserItemMaxAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserItemCountAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserItemAggregateArgs = {
    /**
     * Filter which UserItem to aggregate.
     */
    where?: UserItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserItems to fetch.
     */
    orderBy?: Enumerable<UserItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserItems
    **/
    _count?: true | UserItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserItemMaxAggregateInputType
  }

  export type GetUserItemAggregateType<T extends UserItemAggregateArgs> = {
        [P in keyof T & keyof AggregateUserItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserItem[P]>
      : GetScalarType<T[P], AggregateUserItem[P]>
  }




  export type UserItemGroupByArgs = {
    where?: UserItemWhereInput
    orderBy?: Enumerable<UserItemOrderByWithAggregationInput>
    by: UserItemScalarFieldEnum[]
    having?: UserItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserItemCountAggregateInputType | true
    _avg?: UserItemAvgAggregateInputType
    _sum?: UserItemSumAggregateInputType
    _min?: UserItemMinAggregateInputType
    _max?: UserItemMaxAggregateInputType
  }


  export type UserItemGroupByOutputType = {
    id: number
    userId: number
    itemId: number
    createdAt: Date
    updatedAt: Date
    _count: UserItemCountAggregateOutputType | null
    _avg: UserItemAvgAggregateOutputType | null
    _sum: UserItemSumAggregateOutputType | null
    _min: UserItemMinAggregateOutputType | null
    _max: UserItemMaxAggregateOutputType | null
  }

  type GetUserItemGroupByPayload<T extends UserItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserItemGroupByOutputType[P]>
            : GetScalarType<T[P], UserItemGroupByOutputType[P]>
        }
      >
    >


  export type UserItemSelect = {
    id?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    itemId?: boolean
    Item?: boolean | ItemArgs
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type UserItemInclude = {
    User?: boolean | UserArgs
    Item?: boolean | ItemArgs
  }

  export type UserItemGetPayload<S extends boolean | null | undefined | UserItemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserItem :
    S extends undefined ? never :
    S extends { include: any } & (UserItemArgs | UserItemFindManyArgs)
    ? UserItem  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Item' ? ItemGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserItemArgs | UserItemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Item' ? ItemGetPayload<S['select'][P]> :  P extends keyof UserItem ? UserItem[P] : never
  } 
      : UserItem


  type UserItemCountArgs = 
    Omit<UserItemFindManyArgs, 'select' | 'include'> & {
      select?: UserItemCountAggregateInputType | true
    }

  export interface UserItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one UserItem that matches the filter.
     * @param {UserItemFindUniqueArgs} args - Arguments to find a UserItem
     * @example
     * // Get one UserItem
     * const userItem = await prisma.userItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserItem'> extends True ? Prisma__UserItemClient<UserItemGetPayload<T>> : Prisma__UserItemClient<UserItemGetPayload<T> | null, null>

    /**
     * Find one UserItem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserItemFindUniqueOrThrowArgs} args - Arguments to find a UserItem
     * @example
     * // Get one UserItem
     * const userItem = await prisma.userItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserItemFindUniqueOrThrowArgs>
    ): Prisma__UserItemClient<UserItemGetPayload<T>>

    /**
     * Find the first UserItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserItemFindFirstArgs} args - Arguments to find a UserItem
     * @example
     * // Get one UserItem
     * const userItem = await prisma.userItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserItem'> extends True ? Prisma__UserItemClient<UserItemGetPayload<T>> : Prisma__UserItemClient<UserItemGetPayload<T> | null, null>

    /**
     * Find the first UserItem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserItemFindFirstOrThrowArgs} args - Arguments to find a UserItem
     * @example
     * // Get one UserItem
     * const userItem = await prisma.userItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserItemFindFirstOrThrowArgs>
    ): Prisma__UserItemClient<UserItemGetPayload<T>>

    /**
     * Find zero or more UserItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserItems
     * const userItems = await prisma.userItem.findMany()
     * 
     * // Get first 10 UserItems
     * const userItems = await prisma.userItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userItemWithIdOnly = await prisma.userItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserItemFindManyArgs>(
      args?: SelectSubset<T, UserItemFindManyArgs>
    ): PrismaPromise<Array<UserItemGetPayload<T>>>

    /**
     * Create a UserItem.
     * @param {UserItemCreateArgs} args - Arguments to create a UserItem.
     * @example
     * // Create one UserItem
     * const UserItem = await prisma.userItem.create({
     *   data: {
     *     // ... data to create a UserItem
     *   }
     * })
     * 
    **/
    create<T extends UserItemCreateArgs>(
      args: SelectSubset<T, UserItemCreateArgs>
    ): Prisma__UserItemClient<UserItemGetPayload<T>>

    /**
     * Create many UserItems.
     *     @param {UserItemCreateManyArgs} args - Arguments to create many UserItems.
     *     @example
     *     // Create many UserItems
     *     const userItem = await prisma.userItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserItemCreateManyArgs>(
      args?: SelectSubset<T, UserItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserItem.
     * @param {UserItemDeleteArgs} args - Arguments to delete one UserItem.
     * @example
     * // Delete one UserItem
     * const UserItem = await prisma.userItem.delete({
     *   where: {
     *     // ... filter to delete one UserItem
     *   }
     * })
     * 
    **/
    delete<T extends UserItemDeleteArgs>(
      args: SelectSubset<T, UserItemDeleteArgs>
    ): Prisma__UserItemClient<UserItemGetPayload<T>>

    /**
     * Update one UserItem.
     * @param {UserItemUpdateArgs} args - Arguments to update one UserItem.
     * @example
     * // Update one UserItem
     * const userItem = await prisma.userItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserItemUpdateArgs>(
      args: SelectSubset<T, UserItemUpdateArgs>
    ): Prisma__UserItemClient<UserItemGetPayload<T>>

    /**
     * Delete zero or more UserItems.
     * @param {UserItemDeleteManyArgs} args - Arguments to filter UserItems to delete.
     * @example
     * // Delete a few UserItems
     * const { count } = await prisma.userItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserItemDeleteManyArgs>(
      args?: SelectSubset<T, UserItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserItems
     * const userItem = await prisma.userItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserItemUpdateManyArgs>(
      args: SelectSubset<T, UserItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserItem.
     * @param {UserItemUpsertArgs} args - Arguments to update or create a UserItem.
     * @example
     * // Update or create a UserItem
     * const userItem = await prisma.userItem.upsert({
     *   create: {
     *     // ... data to create a UserItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserItem we want to update
     *   }
     * })
    **/
    upsert<T extends UserItemUpsertArgs>(
      args: SelectSubset<T, UserItemUpsertArgs>
    ): Prisma__UserItemClient<UserItemGetPayload<T>>

    /**
     * Count the number of UserItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserItemCountArgs} args - Arguments to filter UserItems to count.
     * @example
     * // Count the number of UserItems
     * const count = await prisma.userItem.count({
     *   where: {
     *     // ... the filter for the UserItems we want to count
     *   }
     * })
    **/
    count<T extends UserItemCountArgs>(
      args?: Subset<T, UserItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserItemAggregateArgs>(args: Subset<T, UserItemAggregateArgs>): PrismaPromise<GetUserItemAggregateType<T>>

    /**
     * Group by UserItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserItemGroupByArgs['orderBy'] }
        : { orderBy?: UserItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserItemGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserItemClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Item<T extends ItemArgs= {}>(args?: Subset<T, ItemArgs>): Prisma__ItemClient<ItemGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserItem base type for findUnique actions
   */
  export type UserItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * Filter, which UserItem to fetch.
     */
    where: UserItemWhereUniqueInput
  }

  /**
   * UserItem findUnique
   */
  export interface UserItemFindUniqueArgs extends UserItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserItem findUniqueOrThrow
   */
  export type UserItemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * Filter, which UserItem to fetch.
     */
    where: UserItemWhereUniqueInput
  }


  /**
   * UserItem base type for findFirst actions
   */
  export type UserItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * Filter, which UserItem to fetch.
     */
    where?: UserItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserItems to fetch.
     */
    orderBy?: Enumerable<UserItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserItems.
     */
    cursor?: UserItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserItems.
     */
    distinct?: Enumerable<UserItemScalarFieldEnum>
  }

  /**
   * UserItem findFirst
   */
  export interface UserItemFindFirstArgs extends UserItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserItem findFirstOrThrow
   */
  export type UserItemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * Filter, which UserItem to fetch.
     */
    where?: UserItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserItems to fetch.
     */
    orderBy?: Enumerable<UserItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserItems.
     */
    cursor?: UserItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserItems.
     */
    distinct?: Enumerable<UserItemScalarFieldEnum>
  }


  /**
   * UserItem findMany
   */
  export type UserItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * Filter, which UserItems to fetch.
     */
    where?: UserItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserItems to fetch.
     */
    orderBy?: Enumerable<UserItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserItems.
     */
    cursor?: UserItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserItems.
     */
    skip?: number
    distinct?: Enumerable<UserItemScalarFieldEnum>
  }


  /**
   * UserItem create
   */
  export type UserItemCreateArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * The data needed to create a UserItem.
     */
    data: XOR<UserItemCreateInput, UserItemUncheckedCreateInput>
  }


  /**
   * UserItem createMany
   */
  export type UserItemCreateManyArgs = {
    /**
     * The data used to create many UserItems.
     */
    data: Enumerable<UserItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserItem update
   */
  export type UserItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * The data needed to update a UserItem.
     */
    data: XOR<UserItemUpdateInput, UserItemUncheckedUpdateInput>
    /**
     * Choose, which UserItem to update.
     */
    where: UserItemWhereUniqueInput
  }


  /**
   * UserItem updateMany
   */
  export type UserItemUpdateManyArgs = {
    /**
     * The data used to update UserItems.
     */
    data: XOR<UserItemUpdateManyMutationInput, UserItemUncheckedUpdateManyInput>
    /**
     * Filter which UserItems to update
     */
    where?: UserItemWhereInput
  }


  /**
   * UserItem upsert
   */
  export type UserItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * The filter to search for the UserItem to update in case it exists.
     */
    where: UserItemWhereUniqueInput
    /**
     * In case the UserItem found by the `where` argument doesn't exist, create a new UserItem with this data.
     */
    create: XOR<UserItemCreateInput, UserItemUncheckedCreateInput>
    /**
     * In case the UserItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserItemUpdateInput, UserItemUncheckedUpdateInput>
  }


  /**
   * UserItem delete
   */
  export type UserItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
    /**
     * Filter which UserItem to delete.
     */
    where: UserItemWhereUniqueInput
  }


  /**
   * UserItem deleteMany
   */
  export type UserItemDeleteManyArgs = {
    /**
     * Filter which UserItems to delete
     */
    where?: UserItemWhereInput
  }


  /**
   * UserItem without action
   */
  export type UserItemArgs = {
    /**
     * Select specific fields to fetch from the UserItem
     */
    select?: UserItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserItemInclude | null
  }



  /**
   * Model EquipItem
   */


  export type AggregateEquipItem = {
    _count: EquipItemCountAggregateOutputType | null
    _avg: EquipItemAvgAggregateOutputType | null
    _sum: EquipItemSumAggregateOutputType | null
    _min: EquipItemMinAggregateOutputType | null
    _max: EquipItemMaxAggregateOutputType | null
  }

  export type EquipItemAvgAggregateOutputType = {
    id: number | null
    avatarId: number | null
    amuletId: number | null
    handRigthId: number | null
    handLeftId: number | null
  }

  export type EquipItemSumAggregateOutputType = {
    id: number | null
    avatarId: number | null
    amuletId: number | null
    handRigthId: number | null
    handLeftId: number | null
  }

  export type EquipItemMinAggregateOutputType = {
    id: number | null
    avatarId: number | null
    amuletId: number | null
    handRigthId: number | null
    handLeftId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquipItemMaxAggregateOutputType = {
    id: number | null
    avatarId: number | null
    amuletId: number | null
    handRigthId: number | null
    handLeftId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquipItemCountAggregateOutputType = {
    id: number
    avatarId: number
    amuletId: number
    handRigthId: number
    handLeftId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EquipItemAvgAggregateInputType = {
    id?: true
    avatarId?: true
    amuletId?: true
    handRigthId?: true
    handLeftId?: true
  }

  export type EquipItemSumAggregateInputType = {
    id?: true
    avatarId?: true
    amuletId?: true
    handRigthId?: true
    handLeftId?: true
  }

  export type EquipItemMinAggregateInputType = {
    id?: true
    avatarId?: true
    amuletId?: true
    handRigthId?: true
    handLeftId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquipItemMaxAggregateInputType = {
    id?: true
    avatarId?: true
    amuletId?: true
    handRigthId?: true
    handLeftId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquipItemCountAggregateInputType = {
    id?: true
    avatarId?: true
    amuletId?: true
    handRigthId?: true
    handLeftId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EquipItemAggregateArgs = {
    /**
     * Filter which EquipItem to aggregate.
     */
    where?: EquipItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipItems to fetch.
     */
    orderBy?: Enumerable<EquipItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EquipItems
    **/
    _count?: true | EquipItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EquipItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EquipItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipItemMaxAggregateInputType
  }

  export type GetEquipItemAggregateType<T extends EquipItemAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipItem[P]>
      : GetScalarType<T[P], AggregateEquipItem[P]>
  }




  export type EquipItemGroupByArgs = {
    where?: EquipItemWhereInput
    orderBy?: Enumerable<EquipItemOrderByWithAggregationInput>
    by: EquipItemScalarFieldEnum[]
    having?: EquipItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipItemCountAggregateInputType | true
    _avg?: EquipItemAvgAggregateInputType
    _sum?: EquipItemSumAggregateInputType
    _min?: EquipItemMinAggregateInputType
    _max?: EquipItemMaxAggregateInputType
  }


  export type EquipItemGroupByOutputType = {
    id: number
    avatarId: number
    amuletId: number
    handRigthId: number
    handLeftId: number
    createdAt: Date
    updatedAt: Date
    _count: EquipItemCountAggregateOutputType | null
    _avg: EquipItemAvgAggregateOutputType | null
    _sum: EquipItemSumAggregateOutputType | null
    _min: EquipItemMinAggregateOutputType | null
    _max: EquipItemMaxAggregateOutputType | null
  }

  type GetEquipItemGroupByPayload<T extends EquipItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EquipItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipItemGroupByOutputType[P]>
            : GetScalarType<T[P], EquipItemGroupByOutputType[P]>
        }
      >
    >


  export type EquipItemSelect = {
    id?: boolean
    avatarId?: boolean
    Avatar?: boolean | AvatarArgs
    amuletId?: boolean
    handRigthId?: boolean
    handLeftId?: boolean
    Item?: boolean | ItemArgs
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type EquipItemInclude = {
    Avatar?: boolean | AvatarArgs
    Item?: boolean | ItemArgs
  }

  export type EquipItemGetPayload<S extends boolean | null | undefined | EquipItemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EquipItem :
    S extends undefined ? never :
    S extends { include: any } & (EquipItemArgs | EquipItemFindManyArgs)
    ? EquipItem  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Avatar' ? AvatarGetPayload<S['include'][P]> :
        P extends 'Item' ? ItemGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EquipItemArgs | EquipItemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Avatar' ? AvatarGetPayload<S['select'][P]> :
        P extends 'Item' ? ItemGetPayload<S['select'][P]> :  P extends keyof EquipItem ? EquipItem[P] : never
  } 
      : EquipItem


  type EquipItemCountArgs = 
    Omit<EquipItemFindManyArgs, 'select' | 'include'> & {
      select?: EquipItemCountAggregateInputType | true
    }

  export interface EquipItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one EquipItem that matches the filter.
     * @param {EquipItemFindUniqueArgs} args - Arguments to find a EquipItem
     * @example
     * // Get one EquipItem
     * const equipItem = await prisma.equipItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EquipItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EquipItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EquipItem'> extends True ? Prisma__EquipItemClient<EquipItemGetPayload<T>> : Prisma__EquipItemClient<EquipItemGetPayload<T> | null, null>

    /**
     * Find one EquipItem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EquipItemFindUniqueOrThrowArgs} args - Arguments to find a EquipItem
     * @example
     * // Get one EquipItem
     * const equipItem = await prisma.equipItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EquipItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EquipItemFindUniqueOrThrowArgs>
    ): Prisma__EquipItemClient<EquipItemGetPayload<T>>

    /**
     * Find the first EquipItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipItemFindFirstArgs} args - Arguments to find a EquipItem
     * @example
     * // Get one EquipItem
     * const equipItem = await prisma.equipItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EquipItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EquipItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EquipItem'> extends True ? Prisma__EquipItemClient<EquipItemGetPayload<T>> : Prisma__EquipItemClient<EquipItemGetPayload<T> | null, null>

    /**
     * Find the first EquipItem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipItemFindFirstOrThrowArgs} args - Arguments to find a EquipItem
     * @example
     * // Get one EquipItem
     * const equipItem = await prisma.equipItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EquipItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EquipItemFindFirstOrThrowArgs>
    ): Prisma__EquipItemClient<EquipItemGetPayload<T>>

    /**
     * Find zero or more EquipItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EquipItems
     * const equipItems = await prisma.equipItem.findMany()
     * 
     * // Get first 10 EquipItems
     * const equipItems = await prisma.equipItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipItemWithIdOnly = await prisma.equipItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EquipItemFindManyArgs>(
      args?: SelectSubset<T, EquipItemFindManyArgs>
    ): PrismaPromise<Array<EquipItemGetPayload<T>>>

    /**
     * Create a EquipItem.
     * @param {EquipItemCreateArgs} args - Arguments to create a EquipItem.
     * @example
     * // Create one EquipItem
     * const EquipItem = await prisma.equipItem.create({
     *   data: {
     *     // ... data to create a EquipItem
     *   }
     * })
     * 
    **/
    create<T extends EquipItemCreateArgs>(
      args: SelectSubset<T, EquipItemCreateArgs>
    ): Prisma__EquipItemClient<EquipItemGetPayload<T>>

    /**
     * Create many EquipItems.
     *     @param {EquipItemCreateManyArgs} args - Arguments to create many EquipItems.
     *     @example
     *     // Create many EquipItems
     *     const equipItem = await prisma.equipItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EquipItemCreateManyArgs>(
      args?: SelectSubset<T, EquipItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a EquipItem.
     * @param {EquipItemDeleteArgs} args - Arguments to delete one EquipItem.
     * @example
     * // Delete one EquipItem
     * const EquipItem = await prisma.equipItem.delete({
     *   where: {
     *     // ... filter to delete one EquipItem
     *   }
     * })
     * 
    **/
    delete<T extends EquipItemDeleteArgs>(
      args: SelectSubset<T, EquipItemDeleteArgs>
    ): Prisma__EquipItemClient<EquipItemGetPayload<T>>

    /**
     * Update one EquipItem.
     * @param {EquipItemUpdateArgs} args - Arguments to update one EquipItem.
     * @example
     * // Update one EquipItem
     * const equipItem = await prisma.equipItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EquipItemUpdateArgs>(
      args: SelectSubset<T, EquipItemUpdateArgs>
    ): Prisma__EquipItemClient<EquipItemGetPayload<T>>

    /**
     * Delete zero or more EquipItems.
     * @param {EquipItemDeleteManyArgs} args - Arguments to filter EquipItems to delete.
     * @example
     * // Delete a few EquipItems
     * const { count } = await prisma.equipItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EquipItemDeleteManyArgs>(
      args?: SelectSubset<T, EquipItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquipItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EquipItems
     * const equipItem = await prisma.equipItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EquipItemUpdateManyArgs>(
      args: SelectSubset<T, EquipItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one EquipItem.
     * @param {EquipItemUpsertArgs} args - Arguments to update or create a EquipItem.
     * @example
     * // Update or create a EquipItem
     * const equipItem = await prisma.equipItem.upsert({
     *   create: {
     *     // ... data to create a EquipItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EquipItem we want to update
     *   }
     * })
    **/
    upsert<T extends EquipItemUpsertArgs>(
      args: SelectSubset<T, EquipItemUpsertArgs>
    ): Prisma__EquipItemClient<EquipItemGetPayload<T>>

    /**
     * Count the number of EquipItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipItemCountArgs} args - Arguments to filter EquipItems to count.
     * @example
     * // Count the number of EquipItems
     * const count = await prisma.equipItem.count({
     *   where: {
     *     // ... the filter for the EquipItems we want to count
     *   }
     * })
    **/
    count<T extends EquipItemCountArgs>(
      args?: Subset<T, EquipItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EquipItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipItemAggregateArgs>(args: Subset<T, EquipItemAggregateArgs>): PrismaPromise<GetEquipItemAggregateType<T>>

    /**
     * Group by EquipItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipItemGroupByArgs['orderBy'] }
        : { orderBy?: EquipItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipItemGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EquipItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EquipItemClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Avatar<T extends AvatarArgs= {}>(args?: Subset<T, AvatarArgs>): Prisma__AvatarClient<AvatarGetPayload<T> | Null>;

    Item<T extends ItemArgs= {}>(args?: Subset<T, ItemArgs>): Prisma__ItemClient<ItemGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EquipItem base type for findUnique actions
   */
  export type EquipItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * Filter, which EquipItem to fetch.
     */
    where: EquipItemWhereUniqueInput
  }

  /**
   * EquipItem findUnique
   */
  export interface EquipItemFindUniqueArgs extends EquipItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EquipItem findUniqueOrThrow
   */
  export type EquipItemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * Filter, which EquipItem to fetch.
     */
    where: EquipItemWhereUniqueInput
  }


  /**
   * EquipItem base type for findFirst actions
   */
  export type EquipItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * Filter, which EquipItem to fetch.
     */
    where?: EquipItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipItems to fetch.
     */
    orderBy?: Enumerable<EquipItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquipItems.
     */
    cursor?: EquipItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquipItems.
     */
    distinct?: Enumerable<EquipItemScalarFieldEnum>
  }

  /**
   * EquipItem findFirst
   */
  export interface EquipItemFindFirstArgs extends EquipItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EquipItem findFirstOrThrow
   */
  export type EquipItemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * Filter, which EquipItem to fetch.
     */
    where?: EquipItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipItems to fetch.
     */
    orderBy?: Enumerable<EquipItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquipItems.
     */
    cursor?: EquipItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquipItems.
     */
    distinct?: Enumerable<EquipItemScalarFieldEnum>
  }


  /**
   * EquipItem findMany
   */
  export type EquipItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * Filter, which EquipItems to fetch.
     */
    where?: EquipItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipItems to fetch.
     */
    orderBy?: Enumerable<EquipItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EquipItems.
     */
    cursor?: EquipItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipItems.
     */
    skip?: number
    distinct?: Enumerable<EquipItemScalarFieldEnum>
  }


  /**
   * EquipItem create
   */
  export type EquipItemCreateArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * The data needed to create a EquipItem.
     */
    data: XOR<EquipItemCreateInput, EquipItemUncheckedCreateInput>
  }


  /**
   * EquipItem createMany
   */
  export type EquipItemCreateManyArgs = {
    /**
     * The data used to create many EquipItems.
     */
    data: Enumerable<EquipItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EquipItem update
   */
  export type EquipItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * The data needed to update a EquipItem.
     */
    data: XOR<EquipItemUpdateInput, EquipItemUncheckedUpdateInput>
    /**
     * Choose, which EquipItem to update.
     */
    where: EquipItemWhereUniqueInput
  }


  /**
   * EquipItem updateMany
   */
  export type EquipItemUpdateManyArgs = {
    /**
     * The data used to update EquipItems.
     */
    data: XOR<EquipItemUpdateManyMutationInput, EquipItemUncheckedUpdateManyInput>
    /**
     * Filter which EquipItems to update
     */
    where?: EquipItemWhereInput
  }


  /**
   * EquipItem upsert
   */
  export type EquipItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * The filter to search for the EquipItem to update in case it exists.
     */
    where: EquipItemWhereUniqueInput
    /**
     * In case the EquipItem found by the `where` argument doesn't exist, create a new EquipItem with this data.
     */
    create: XOR<EquipItemCreateInput, EquipItemUncheckedCreateInput>
    /**
     * In case the EquipItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipItemUpdateInput, EquipItemUncheckedUpdateInput>
  }


  /**
   * EquipItem delete
   */
  export type EquipItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
    /**
     * Filter which EquipItem to delete.
     */
    where: EquipItemWhereUniqueInput
  }


  /**
   * EquipItem deleteMany
   */
  export type EquipItemDeleteManyArgs = {
    /**
     * Filter which EquipItems to delete
     */
    where?: EquipItemWhereInput
  }


  /**
   * EquipItem without action
   */
  export type EquipItemArgs = {
    /**
     * Select specific fields to fetch from the EquipItem
     */
    select?: EquipItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EquipItemInclude | null
  }



  /**
   * Model Vote
   */


  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteAvgAggregateOutputType = {
    id: number | null
    note: number | null
    userId: number | null
    gameId: number | null
  }

  export type VoteSumAggregateOutputType = {
    id: number | null
    note: number | null
    userId: number | null
    gameId: number | null
  }

  export type VoteMinAggregateOutputType = {
    id: number | null
    note: number | null
    post: string | null
    userId: number | null
    gameId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VoteMaxAggregateOutputType = {
    id: number | null
    note: number | null
    post: string | null
    userId: number | null
    gameId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VoteCountAggregateOutputType = {
    id: number
    note: number
    post: number
    userId: number
    gameId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VoteAvgAggregateInputType = {
    id?: true
    note?: true
    userId?: true
    gameId?: true
  }

  export type VoteSumAggregateInputType = {
    id?: true
    note?: true
    userId?: true
    gameId?: true
  }

  export type VoteMinAggregateInputType = {
    id?: true
    note?: true
    post?: true
    userId?: true
    gameId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    note?: true
    post?: true
    userId?: true
    gameId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VoteCountAggregateInputType = {
    id?: true
    note?: true
    post?: true
    userId?: true
    gameId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VoteAggregateArgs = {
    /**
     * Filter which Vote to aggregate.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs = {
    where?: VoteWhereInput
    orderBy?: Enumerable<VoteOrderByWithAggregationInput>
    by: VoteScalarFieldEnum[]
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _avg?: VoteAvgAggregateInputType
    _sum?: VoteSumAggregateInputType
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }


  export type VoteGroupByOutputType = {
    id: number
    note: number
    post: string
    userId: number
    gameId: number
    createdAt: Date
    updatedAt: Date
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type VoteSelect = {
    id?: boolean
    note?: boolean
    post?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    gameId?: boolean
    Game?: boolean | GameArgs
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type VoteInclude = {
    User?: boolean | UserArgs
    Game?: boolean | GameArgs
  }

  export type VoteGetPayload<S extends boolean | null | undefined | VoteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Vote :
    S extends undefined ? never :
    S extends { include: any } & (VoteArgs | VoteFindManyArgs)
    ? Vote  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Game' ? GameGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (VoteArgs | VoteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Game' ? GameGetPayload<S['select'][P]> :  P extends keyof Vote ? Vote[P] : never
  } 
      : Vote


  type VoteCountArgs = 
    Omit<VoteFindManyArgs, 'select' | 'include'> & {
      select?: VoteCountAggregateInputType | true
    }

  export interface VoteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vote'> extends True ? Prisma__VoteClient<VoteGetPayload<T>> : Prisma__VoteClient<VoteGetPayload<T> | null, null>

    /**
     * Find one Vote that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VoteFindUniqueOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VoteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VoteFindUniqueOrThrowArgs>
    ): Prisma__VoteClient<VoteGetPayload<T>>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vote'> extends True ? Prisma__VoteClient<VoteGetPayload<T>> : Prisma__VoteClient<VoteGetPayload<T> | null, null>

    /**
     * Find the first Vote that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VoteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VoteFindFirstOrThrowArgs>
    ): Prisma__VoteClient<VoteGetPayload<T>>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VoteFindManyArgs>(
      args?: SelectSubset<T, VoteFindManyArgs>
    ): PrismaPromise<Array<VoteGetPayload<T>>>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
    **/
    create<T extends VoteCreateArgs>(
      args: SelectSubset<T, VoteCreateArgs>
    ): Prisma__VoteClient<VoteGetPayload<T>>

    /**
     * Create many Votes.
     *     @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     *     @example
     *     // Create many Votes
     *     const vote = await prisma.vote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VoteCreateManyArgs>(
      args?: SelectSubset<T, VoteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
    **/
    delete<T extends VoteDeleteArgs>(
      args: SelectSubset<T, VoteDeleteArgs>
    ): Prisma__VoteClient<VoteGetPayload<T>>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoteUpdateArgs>(
      args: SelectSubset<T, VoteUpdateArgs>
    ): Prisma__VoteClient<VoteGetPayload<T>>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoteDeleteManyArgs>(
      args?: SelectSubset<T, VoteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoteUpdateManyArgs>(
      args: SelectSubset<T, VoteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
    **/
    upsert<T extends VoteUpsertArgs>(
      args: SelectSubset<T, VoteUpsertArgs>
    ): Prisma__VoteClient<VoteGetPayload<T>>

    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VoteClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Game<T extends GameArgs= {}>(args?: Subset<T, GameArgs>): Prisma__GameClient<GameGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Vote base type for findUnique actions
   */
  export type VoteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findUnique
   */
  export interface VoteFindUniqueArgs extends VoteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vote findUniqueOrThrow
   */
  export type VoteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }


  /**
   * Vote base type for findFirst actions
   */
  export type VoteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: Enumerable<VoteScalarFieldEnum>
  }

  /**
   * Vote findFirst
   */
  export interface VoteFindFirstArgs extends VoteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vote findFirstOrThrow
   */
  export type VoteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * Vote findMany
   */
  export type VoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * Filter, which Votes to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * Vote create
   */
  export type VoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * The data needed to create a Vote.
     */
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }


  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs = {
    /**
     * The data used to create many Votes.
     */
    data: Enumerable<VoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vote update
   */
  export type VoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * The data needed to update a Vote.
     */
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     */
    where: VoteWhereUniqueInput
  }


  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs = {
    /**
     * The data used to update Votes.
     */
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     */
    where?: VoteWhereInput
  }


  /**
   * Vote upsert
   */
  export type VoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * The filter to search for the Vote to update in case it exists.
     */
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     */
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }


  /**
   * Vote delete
   */
  export type VoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
    /**
     * Filter which Vote to delete.
     */
    where: VoteWhereUniqueInput
  }


  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs = {
    /**
     * Filter which Votes to delete
     */
    where?: VoteWhereInput
  }


  /**
   * Vote without action
   */
  export type VoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoteInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AvatarGameScalarFieldEnum: {
    id: 'id',
    stage: 'stage',
    finished: 'finished',
    position: 'position',
    skill: 'skill',
    avatarId: 'avatarId',
    gameId: 'gameId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AvatarGameScalarFieldEnum = (typeof AvatarGameScalarFieldEnum)[keyof typeof AvatarGameScalarFieldEnum]


  export const AvatarScalarFieldEnum: {
    id: 'id',
    nick: 'nick',
    stamina: 'stamina',
    mana: 'mana',
    level: 'level',
    xp: 'xp',
    gold: 'gold',
    identity: 'identity',
    breed: 'breed',
    class: 'class',
    skill: 'skill',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AvatarScalarFieldEnum = (typeof AvatarScalarFieldEnum)[keyof typeof AvatarScalarFieldEnum]


  export const EnrollmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    birthday: 'birthday',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EnrollmentScalarFieldEnum = (typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum]


  export const EquipItemScalarFieldEnum: {
    id: 'id',
    avatarId: 'avatarId',
    amuletId: 'amuletId',
    handRigthId: 'handRigthId',
    handLeftId: 'handLeftId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EquipItemScalarFieldEnum = (typeof EquipItemScalarFieldEnum)[keyof typeof EquipItemScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    level: 'level',
    description: 'description',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const GameStageScalarFieldEnum: {
    id: 'id',
    position: 'position',
    gameId: 'gameId',
    stageId: 'stageId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameStageScalarFieldEnum = (typeof GameStageScalarFieldEnum)[keyof typeof GameStageScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    effect: 'effect',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    options: 'options',
    description: 'description',
    objects: 'objects',
    refStageId: 'refStageId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StageScalarFieldEnum = (typeof StageScalarFieldEnum)[keyof typeof StageScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserItemScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    itemId: 'itemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserItemScalarFieldEnum = (typeof UserItemScalarFieldEnum)[keyof typeof UserItemScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    id: 'id',
    note: 'note',
    post: 'post',
    userId: 'userId',
    gameId: 'gameId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    active?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Session?: SessionListRelationFilter
    Enrollment?: EnrollmentListRelationFilter
    Avatar?: AvatarListRelationFilter
    Game?: GameListRelationFilter
    Stage?: StageListRelationFilter
    UserItem?: UserItemListRelationFilter
    Vote?: VoteListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Session?: SessionOrderByRelationAggregateInput
    Enrollment?: EnrollmentOrderByRelationAggregateInput
    Avatar?: AvatarOrderByRelationAggregateInput
    Game?: GameOrderByRelationAggregateInput
    Stage?: StageOrderByRelationAggregateInput
    UserItem?: UserItemOrderByRelationAggregateInput
    Vote?: VoteOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    id?: number
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EnrollmentWhereInput = {
    AND?: Enumerable<EnrollmentWhereInput>
    OR?: Enumerable<EnrollmentWhereInput>
    NOT?: Enumerable<EnrollmentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    birthday?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type EnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentWhereUniqueInput = {
    id?: number
    userId?: number
  }

  export type EnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EnrollmentCountOrderByAggregateInput
    _avg?: EnrollmentAvgOrderByAggregateInput
    _max?: EnrollmentMaxOrderByAggregateInput
    _min?: EnrollmentMinOrderByAggregateInput
    _sum?: EnrollmentSumOrderByAggregateInput
  }

  export type EnrollmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EnrollmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<EnrollmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EnrollmentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    birthday?: DateTimeWithAggregatesFilter | Date | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AvatarWhereInput = {
    AND?: Enumerable<AvatarWhereInput>
    OR?: Enumerable<AvatarWhereInput>
    NOT?: Enumerable<AvatarWhereInput>
    id?: IntFilter | number
    nick?: StringFilter | string
    stamina?: IntFilter | number
    mana?: IntFilter | number
    level?: IntFilter | number
    xp?: IntFilter | number
    gold?: IntFilter | number
    identity?: EnumGenderFilter | Gender
    breed?: EnumRacesFilter | Races
    class?: EnumClassesFilter | Classes
    skill?: EnumSkillsFilter | Skills
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    EquipItem?: EquipItemListRelationFilter
    AvatarGame?: AvatarGameListRelationFilter
  }

  export type AvatarOrderByWithRelationInput = {
    id?: SortOrder
    nick?: SortOrder
    stamina?: SortOrder
    mana?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    identity?: SortOrder
    breed?: SortOrder
    class?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    EquipItem?: EquipItemOrderByRelationAggregateInput
    AvatarGame?: AvatarGameOrderByRelationAggregateInput
  }

  export type AvatarWhereUniqueInput = {
    id?: number
  }

  export type AvatarOrderByWithAggregationInput = {
    id?: SortOrder
    nick?: SortOrder
    stamina?: SortOrder
    mana?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    identity?: SortOrder
    breed?: SortOrder
    class?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AvatarCountOrderByAggregateInput
    _avg?: AvatarAvgOrderByAggregateInput
    _max?: AvatarMaxOrderByAggregateInput
    _min?: AvatarMinOrderByAggregateInput
    _sum?: AvatarSumOrderByAggregateInput
  }

  export type AvatarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AvatarScalarWhereWithAggregatesInput>
    OR?: Enumerable<AvatarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AvatarScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nick?: StringWithAggregatesFilter | string
    stamina?: IntWithAggregatesFilter | number
    mana?: IntWithAggregatesFilter | number
    level?: IntWithAggregatesFilter | number
    xp?: IntWithAggregatesFilter | number
    gold?: IntWithAggregatesFilter | number
    identity?: EnumGenderWithAggregatesFilter | Gender
    breed?: EnumRacesWithAggregatesFilter | Races
    class?: EnumClassesWithAggregatesFilter | Classes
    skill?: EnumSkillsWithAggregatesFilter | Skills
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GameWhereInput = {
    AND?: Enumerable<GameWhereInput>
    OR?: Enumerable<GameWhereInput>
    NOT?: Enumerable<GameWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    level?: IntFilter | number
    description?: StringFilter | string
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    AvatarGame?: AvatarGameListRelationFilter
    GameStage?: GameStageListRelationFilter
    Vote?: VoteListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    AvatarGame?: AvatarGameOrderByRelationAggregateInput
    GameStage?: GameStageOrderByRelationAggregateInput
    Vote?: VoteOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = {
    id?: number
  }

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    level?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AvatarGameWhereInput = {
    AND?: Enumerable<AvatarGameWhereInput>
    OR?: Enumerable<AvatarGameWhereInput>
    NOT?: Enumerable<AvatarGameWhereInput>
    id?: IntFilter | number
    stage?: StringFilter | string
    finished?: BoolFilter | boolean
    position?: IntFilter | number
    skill?: BoolFilter | boolean
    avatarId?: IntFilter | number
    Avatar?: XOR<AvatarRelationFilter, AvatarWhereInput>
    gameId?: IntFilter | number
    Game?: XOR<GameRelationFilter, GameWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AvatarGameOrderByWithRelationInput = {
    id?: SortOrder
    stage?: SortOrder
    finished?: SortOrder
    position?: SortOrder
    skill?: SortOrder
    avatarId?: SortOrder
    Avatar?: AvatarOrderByWithRelationInput
    gameId?: SortOrder
    Game?: GameOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AvatarGameWhereUniqueInput = {
    id?: number
  }

  export type AvatarGameOrderByWithAggregationInput = {
    id?: SortOrder
    stage?: SortOrder
    finished?: SortOrder
    position?: SortOrder
    skill?: SortOrder
    avatarId?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AvatarGameCountOrderByAggregateInput
    _avg?: AvatarGameAvgOrderByAggregateInput
    _max?: AvatarGameMaxOrderByAggregateInput
    _min?: AvatarGameMinOrderByAggregateInput
    _sum?: AvatarGameSumOrderByAggregateInput
  }

  export type AvatarGameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AvatarGameScalarWhereWithAggregatesInput>
    OR?: Enumerable<AvatarGameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AvatarGameScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    stage?: StringWithAggregatesFilter | string
    finished?: BoolWithAggregatesFilter | boolean
    position?: IntWithAggregatesFilter | number
    skill?: BoolWithAggregatesFilter | boolean
    avatarId?: IntWithAggregatesFilter | number
    gameId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StageWhereInput = {
    AND?: Enumerable<StageWhereInput>
    OR?: Enumerable<StageWhereInput>
    NOT?: Enumerable<StageWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    options?: StringFilter | string
    description?: StringFilter | string
    objects?: StringFilter | string
    refStageId?: IntFilter | number
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    GameStage?: GameStageListRelationFilter
  }

  export type StageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    options?: SortOrder
    description?: SortOrder
    objects?: SortOrder
    refStageId?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    GameStage?: GameStageOrderByRelationAggregateInput
  }

  export type StageWhereUniqueInput = {
    id?: number
  }

  export type StageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    options?: SortOrder
    description?: SortOrder
    objects?: SortOrder
    refStageId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StageCountOrderByAggregateInput
    _avg?: StageAvgOrderByAggregateInput
    _max?: StageMaxOrderByAggregateInput
    _min?: StageMinOrderByAggregateInput
    _sum?: StageSumOrderByAggregateInput
  }

  export type StageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StageScalarWhereWithAggregatesInput>
    OR?: Enumerable<StageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    options?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    objects?: StringWithAggregatesFilter | string
    refStageId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GameStageWhereInput = {
    AND?: Enumerable<GameStageWhereInput>
    OR?: Enumerable<GameStageWhereInput>
    NOT?: Enumerable<GameStageWhereInput>
    id?: IntFilter | number
    position?: IntFilter | number
    gameId?: IntFilter | number
    Game?: XOR<GameRelationFilter, GameWhereInput>
    stageId?: IntFilter | number
    Stage?: XOR<StageRelationFilter, StageWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GameStageOrderByWithRelationInput = {
    id?: SortOrder
    position?: SortOrder
    gameId?: SortOrder
    Game?: GameOrderByWithRelationInput
    stageId?: SortOrder
    Stage?: StageOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameStageWhereUniqueInput = {
    id?: number
  }

  export type GameStageOrderByWithAggregationInput = {
    id?: SortOrder
    position?: SortOrder
    gameId?: SortOrder
    stageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameStageCountOrderByAggregateInput
    _avg?: GameStageAvgOrderByAggregateInput
    _max?: GameStageMaxOrderByAggregateInput
    _min?: GameStageMinOrderByAggregateInput
    _sum?: GameStageSumOrderByAggregateInput
  }

  export type GameStageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameStageScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameStageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameStageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    position?: IntWithAggregatesFilter | number
    gameId?: IntWithAggregatesFilter | number
    stageId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ItemWhereInput = {
    AND?: Enumerable<ItemWhereInput>
    OR?: Enumerable<ItemWhereInput>
    NOT?: Enumerable<ItemWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    effect?: StringFilter | string
    price?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    UserItem?: UserItemListRelationFilter
    EquipItem?: EquipItemListRelationFilter
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    effect?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    UserItem?: UserItemOrderByRelationAggregateInput
    EquipItem?: EquipItemOrderByRelationAggregateInput
  }

  export type ItemWhereUniqueInput = {
    id?: number
  }

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    effect?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<ItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    effect?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserItemWhereInput = {
    AND?: Enumerable<UserItemWhereInput>
    OR?: Enumerable<UserItemWhereInput>
    NOT?: Enumerable<UserItemWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    itemId?: IntFilter | number
    Item?: XOR<ItemRelationFilter, ItemWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserItemOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    itemId?: SortOrder
    Item?: ItemOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserItemWhereUniqueInput = {
    id?: number
    itemId?: number
  }

  export type UserItemOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserItemCountOrderByAggregateInput
    _avg?: UserItemAvgOrderByAggregateInput
    _max?: UserItemMaxOrderByAggregateInput
    _min?: UserItemMinOrderByAggregateInput
    _sum?: UserItemSumOrderByAggregateInput
  }

  export type UserItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    itemId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EquipItemWhereInput = {
    AND?: Enumerable<EquipItemWhereInput>
    OR?: Enumerable<EquipItemWhereInput>
    NOT?: Enumerable<EquipItemWhereInput>
    id?: IntFilter | number
    avatarId?: IntFilter | number
    Avatar?: XOR<AvatarRelationFilter, AvatarWhereInput>
    amuletId?: IntFilter | number
    handRigthId?: IntFilter | number
    handLeftId?: IntFilter | number
    Item?: XOR<ItemRelationFilter, ItemWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type EquipItemOrderByWithRelationInput = {
    id?: SortOrder
    avatarId?: SortOrder
    Avatar?: AvatarOrderByWithRelationInput
    amuletId?: SortOrder
    handRigthId?: SortOrder
    handLeftId?: SortOrder
    Item?: ItemOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipItemWhereUniqueInput = {
    id?: number
    amuletId?: number
    handRigthId?: number
    handLeftId?: number
  }

  export type EquipItemOrderByWithAggregationInput = {
    id?: SortOrder
    avatarId?: SortOrder
    amuletId?: SortOrder
    handRigthId?: SortOrder
    handLeftId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EquipItemCountOrderByAggregateInput
    _avg?: EquipItemAvgOrderByAggregateInput
    _max?: EquipItemMaxOrderByAggregateInput
    _min?: EquipItemMinOrderByAggregateInput
    _sum?: EquipItemSumOrderByAggregateInput
  }

  export type EquipItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EquipItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<EquipItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EquipItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    avatarId?: IntWithAggregatesFilter | number
    amuletId?: IntWithAggregatesFilter | number
    handRigthId?: IntWithAggregatesFilter | number
    handLeftId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VoteWhereInput = {
    AND?: Enumerable<VoteWhereInput>
    OR?: Enumerable<VoteWhereInput>
    NOT?: Enumerable<VoteWhereInput>
    id?: IntFilter | number
    note?: IntFilter | number
    post?: StringFilter | string
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    gameId?: IntFilter | number
    Game?: XOR<GameRelationFilter, GameWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type VoteOrderByWithRelationInput = {
    id?: SortOrder
    note?: SortOrder
    post?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    gameId?: SortOrder
    Game?: GameOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoteWhereUniqueInput = {
    id?: number
  }

  export type VoteOrderByWithAggregationInput = {
    id?: SortOrder
    note?: SortOrder
    post?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VoteCountOrderByAggregateInput
    _avg?: VoteAvgOrderByAggregateInput
    _max?: VoteMaxOrderByAggregateInput
    _min?: VoteMinOrderByAggregateInput
    _sum?: VoteSumOrderByAggregateInput
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<VoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VoteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    note?: IntWithAggregatesFilter | number
    post?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    gameId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentCreateNestedManyWithoutUserInput
    Avatar?: AvatarCreateNestedManyWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    Stage?: StageCreateNestedManyWithoutUserInput
    UserItem?: UserItemCreateNestedManyWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    Avatar?: AvatarUncheckedCreateNestedManyWithoutUserInput
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    Stage?: StageUncheckedCreateNestedManyWithoutUserInput
    UserItem?: UserItemUncheckedCreateNestedManyWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUpdateManyWithoutUserNestedInput
    Game?: GameUpdateManyWithoutUserNestedInput
    Stage?: StageUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUpdateManyWithoutUserNestedInput
    Vote?: VoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUncheckedUpdateManyWithoutUserNestedInput
    Game?: GameUncheckedUpdateManyWithoutUserNestedInput
    Stage?: StageUncheckedUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUncheckedUpdateManyWithoutUserNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    User: UserCreateNestedOneWithoutSessionInput
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    userId: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    User?: UserUpdateOneRequiredWithoutSessionNestedInput
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    userId: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateInput = {
    name: string
    birthday: Date | string
    User: UserCreateNestedOneWithoutEnrollmentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUncheckedCreateInput = {
    id?: number
    name: string
    birthday: Date | string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutEnrollmentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateManyInput = {
    id?: number
    name: string
    birthday: Date | string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarCreateInput = {
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    User: UserCreateNestedOneWithoutAvatarInput
    createdAt?: Date | string
    updatedAt?: Date | string
    EquipItem?: EquipItemCreateNestedManyWithoutAvatarInput
    AvatarGame?: AvatarGameCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUncheckedCreateInput = {
    id?: number
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    EquipItem?: EquipItemUncheckedCreateNestedManyWithoutAvatarInput
    AvatarGame?: AvatarGameUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUpdateInput = {
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    User?: UserUpdateOneRequiredWithoutAvatarNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EquipItem?: EquipItemUpdateManyWithoutAvatarNestedInput
    AvatarGame?: AvatarGameUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EquipItem?: EquipItemUncheckedUpdateManyWithoutAvatarNestedInput
    AvatarGame?: AvatarGameUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarCreateManyInput = {
    id?: number
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarUpdateManyMutationInput = {
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateInput = {
    name: string
    level: number
    description: string
    User: UserCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameCreateNestedManyWithoutGameInput
    GameStage?: GameStageCreateNestedManyWithoutGameInput
    Vote?: VoteCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: number
    name: string
    level: number
    description: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameUncheckedCreateNestedManyWithoutGameInput
    GameStage?: GameStageUncheckedCreateNestedManyWithoutGameInput
    Vote?: VoteUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutGameNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUpdateManyWithoutGameNestedInput
    GameStage?: GameStageUpdateManyWithoutGameNestedInput
    Vote?: VoteUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUncheckedUpdateManyWithoutGameNestedInput
    GameStage?: GameStageUncheckedUpdateManyWithoutGameNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: number
    name: string
    level: number
    description: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameCreateInput = {
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    Avatar: AvatarCreateNestedOneWithoutAvatarGameInput
    Game: GameCreateNestedOneWithoutAvatarGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameUncheckedCreateInput = {
    id?: number
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    avatarId: number
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameUpdateInput = {
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    Avatar?: AvatarUpdateOneRequiredWithoutAvatarGameNestedInput
    Game?: GameUpdateOneRequiredWithoutAvatarGameNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    avatarId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameCreateManyInput = {
    id?: number
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    avatarId: number
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameUpdateManyMutationInput = {
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    avatarId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageCreateInput = {
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    User: UserCreateNestedOneWithoutStageInput
    createdAt?: Date | string
    updatedAt?: Date | string
    GameStage?: GameStageCreateNestedManyWithoutStageInput
  }

  export type StageUncheckedCreateInput = {
    id?: number
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    GameStage?: GameStageUncheckedCreateNestedManyWithoutStageInput
  }

  export type StageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutStageNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameStage?: GameStageUpdateManyWithoutStageNestedInput
  }

  export type StageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameStage?: GameStageUncheckedUpdateManyWithoutStageNestedInput
  }

  export type StageCreateManyInput = {
    id?: number
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageCreateInput = {
    position: number
    Game: GameCreateNestedOneWithoutGameStageInput
    Stage: StageCreateNestedOneWithoutGameStageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageUncheckedCreateInput = {
    id?: number
    position: number
    gameId: number
    stageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageUpdateInput = {
    position?: IntFieldUpdateOperationsInput | number
    Game?: GameUpdateOneRequiredWithoutGameStageNestedInput
    Stage?: StageUpdateOneRequiredWithoutGameStageNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    stageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageCreateManyInput = {
    id?: number
    position: number
    gameId: number
    stageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageUpdateManyMutationInput = {
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    stageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateInput = {
    name: string
    type: string
    effect: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    UserItem?: UserItemCreateNestedManyWithoutItemInput
    EquipItem?: EquipItemCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    effect: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    UserItem?: UserItemUncheckedCreateNestedManyWithoutItemInput
    EquipItem?: EquipItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UserItem?: UserItemUpdateManyWithoutItemNestedInput
    EquipItem?: EquipItemUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UserItem?: UserItemUncheckedUpdateManyWithoutItemNestedInput
    EquipItem?: EquipItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateManyInput = {
    id?: number
    name: string
    type: string
    effect: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemCreateInput = {
    User: UserCreateNestedOneWithoutUserItemInput
    Item: ItemCreateNestedOneWithoutUserItemInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemUncheckedCreateInput = {
    id?: number
    userId: number
    itemId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemUpdateInput = {
    User?: UserUpdateOneRequiredWithoutUserItemNestedInput
    Item?: ItemUpdateOneRequiredWithoutUserItemNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemCreateManyInput = {
    id?: number
    userId: number
    itemId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemCreateInput = {
    Avatar: AvatarCreateNestedOneWithoutEquipItemInput
    handRigthId: number
    handLeftId: number
    Item: ItemCreateNestedOneWithoutEquipItemInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemUncheckedCreateInput = {
    id?: number
    avatarId: number
    amuletId: number
    handRigthId: number
    handLeftId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemUpdateInput = {
    Avatar?: AvatarUpdateOneRequiredWithoutEquipItemNestedInput
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    Item?: ItemUpdateOneRequiredWithoutEquipItemNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarId?: IntFieldUpdateOperationsInput | number
    amuletId?: IntFieldUpdateOperationsInput | number
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemCreateManyInput = {
    id?: number
    avatarId: number
    amuletId: number
    handRigthId: number
    handLeftId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemUpdateManyMutationInput = {
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarId?: IntFieldUpdateOperationsInput | number
    amuletId?: IntFieldUpdateOperationsInput | number
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateInput = {
    note: number
    post: string
    User: UserCreateNestedOneWithoutVoteInput
    Game: GameCreateNestedOneWithoutVoteInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteUncheckedCreateInput = {
    id?: number
    note: number
    post: string
    userId: number
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteUpdateInput = {
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutVoteNestedInput
    Game?: GameUpdateOneRequiredWithoutVoteNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateManyInput = {
    id?: number
    note: number
    post: string
    userId: number
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteUpdateManyMutationInput = {
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type EnrollmentListRelationFilter = {
    every?: EnrollmentWhereInput
    some?: EnrollmentWhereInput
    none?: EnrollmentWhereInput
  }

  export type AvatarListRelationFilter = {
    every?: AvatarWhereInput
    some?: AvatarWhereInput
    none?: AvatarWhereInput
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type StageListRelationFilter = {
    every?: StageWhereInput
    some?: StageWhereInput
    none?: StageWhereInput
  }

  export type UserItemListRelationFilter = {
    every?: UserItemWhereInput
    some?: UserItemWhereInput
    none?: UserItemWhereInput
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AvatarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumGenderFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: NestedEnumGenderFilter | Gender
  }

  export type EnumRacesFilter = {
    equals?: Races
    in?: Enumerable<Races>
    notIn?: Enumerable<Races>
    not?: NestedEnumRacesFilter | Races
  }

  export type EnumClassesFilter = {
    equals?: Classes
    in?: Enumerable<Classes>
    notIn?: Enumerable<Classes>
    not?: NestedEnumClassesFilter | Classes
  }

  export type EnumSkillsFilter = {
    equals?: Skills
    in?: Enumerable<Skills>
    notIn?: Enumerable<Skills>
    not?: NestedEnumSkillsFilter | Skills
  }

  export type EquipItemListRelationFilter = {
    every?: EquipItemWhereInput
    some?: EquipItemWhereInput
    none?: EquipItemWhereInput
  }

  export type AvatarGameListRelationFilter = {
    every?: AvatarGameWhereInput
    some?: AvatarGameWhereInput
    none?: AvatarGameWhereInput
  }

  export type EquipItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AvatarGameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AvatarCountOrderByAggregateInput = {
    id?: SortOrder
    nick?: SortOrder
    stamina?: SortOrder
    mana?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    identity?: SortOrder
    breed?: SortOrder
    class?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AvatarAvgOrderByAggregateInput = {
    id?: SortOrder
    stamina?: SortOrder
    mana?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    userId?: SortOrder
  }

  export type AvatarMaxOrderByAggregateInput = {
    id?: SortOrder
    nick?: SortOrder
    stamina?: SortOrder
    mana?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    identity?: SortOrder
    breed?: SortOrder
    class?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AvatarMinOrderByAggregateInput = {
    id?: SortOrder
    nick?: SortOrder
    stamina?: SortOrder
    mana?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    identity?: SortOrder
    breed?: SortOrder
    class?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AvatarSumOrderByAggregateInput = {
    id?: SortOrder
    stamina?: SortOrder
    mana?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    userId?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: NestedEnumGenderWithAggregatesFilter | Gender
    _count?: NestedIntFilter
    _min?: NestedEnumGenderFilter
    _max?: NestedEnumGenderFilter
  }

  export type EnumRacesWithAggregatesFilter = {
    equals?: Races
    in?: Enumerable<Races>
    notIn?: Enumerable<Races>
    not?: NestedEnumRacesWithAggregatesFilter | Races
    _count?: NestedIntFilter
    _min?: NestedEnumRacesFilter
    _max?: NestedEnumRacesFilter
  }

  export type EnumClassesWithAggregatesFilter = {
    equals?: Classes
    in?: Enumerable<Classes>
    notIn?: Enumerable<Classes>
    not?: NestedEnumClassesWithAggregatesFilter | Classes
    _count?: NestedIntFilter
    _min?: NestedEnumClassesFilter
    _max?: NestedEnumClassesFilter
  }

  export type EnumSkillsWithAggregatesFilter = {
    equals?: Skills
    in?: Enumerable<Skills>
    notIn?: Enumerable<Skills>
    not?: NestedEnumSkillsWithAggregatesFilter | Skills
    _count?: NestedIntFilter
    _min?: NestedEnumSkillsFilter
    _max?: NestedEnumSkillsFilter
  }

  export type GameStageListRelationFilter = {
    every?: GameStageWhereInput
    some?: GameStageWhereInput
    none?: GameStageWhereInput
  }

  export type GameStageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    userId?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    userId?: SortOrder
  }

  export type AvatarRelationFilter = {
    is?: AvatarWhereInput
    isNot?: AvatarWhereInput
  }

  export type GameRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type AvatarGameCountOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    finished?: SortOrder
    position?: SortOrder
    skill?: SortOrder
    avatarId?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AvatarGameAvgOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    avatarId?: SortOrder
    gameId?: SortOrder
  }

  export type AvatarGameMaxOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    finished?: SortOrder
    position?: SortOrder
    skill?: SortOrder
    avatarId?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AvatarGameMinOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    finished?: SortOrder
    position?: SortOrder
    skill?: SortOrder
    avatarId?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AvatarGameSumOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    avatarId?: SortOrder
    gameId?: SortOrder
  }

  export type StageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    options?: SortOrder
    description?: SortOrder
    objects?: SortOrder
    refStageId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageAvgOrderByAggregateInput = {
    id?: SortOrder
    refStageId?: SortOrder
    userId?: SortOrder
  }

  export type StageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    options?: SortOrder
    description?: SortOrder
    objects?: SortOrder
    refStageId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    options?: SortOrder
    description?: SortOrder
    objects?: SortOrder
    refStageId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageSumOrderByAggregateInput = {
    id?: SortOrder
    refStageId?: SortOrder
    userId?: SortOrder
  }

  export type StageRelationFilter = {
    is?: StageWhereInput
    isNot?: StageWhereInput
  }

  export type GameStageCountOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    gameId?: SortOrder
    stageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameStageAvgOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    gameId?: SortOrder
    stageId?: SortOrder
  }

  export type GameStageMaxOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    gameId?: SortOrder
    stageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameStageMinOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    gameId?: SortOrder
    stageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameStageSumOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    gameId?: SortOrder
    stageId?: SortOrder
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    effect?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    effect?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    effect?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type ItemRelationFilter = {
    is?: ItemWhereInput
    isNot?: ItemWhereInput
  }

  export type UserItemCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserItemAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
  }

  export type UserItemMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserItemMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserItemSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
  }

  export type EquipItemCountOrderByAggregateInput = {
    id?: SortOrder
    avatarId?: SortOrder
    amuletId?: SortOrder
    handRigthId?: SortOrder
    handLeftId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipItemAvgOrderByAggregateInput = {
    id?: SortOrder
    avatarId?: SortOrder
    amuletId?: SortOrder
    handRigthId?: SortOrder
    handLeftId?: SortOrder
  }

  export type EquipItemMaxOrderByAggregateInput = {
    id?: SortOrder
    avatarId?: SortOrder
    amuletId?: SortOrder
    handRigthId?: SortOrder
    handLeftId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipItemMinOrderByAggregateInput = {
    id?: SortOrder
    avatarId?: SortOrder
    amuletId?: SortOrder
    handRigthId?: SortOrder
    handLeftId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipItemSumOrderByAggregateInput = {
    id?: SortOrder
    avatarId?: SortOrder
    amuletId?: SortOrder
    handRigthId?: SortOrder
    handLeftId?: SortOrder
  }

  export type VoteCountOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    post?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoteAvgOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type VoteMaxOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    post?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoteMinOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    post?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoteSumOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type EnrollmentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutUserInput>, Enumerable<EnrollmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutUserInput>
    createMany?: EnrollmentCreateManyUserInputEnvelope
    connect?: Enumerable<EnrollmentWhereUniqueInput>
  }

  export type AvatarCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AvatarCreateWithoutUserInput>, Enumerable<AvatarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AvatarCreateOrConnectWithoutUserInput>
    createMany?: AvatarCreateManyUserInputEnvelope
    connect?: Enumerable<AvatarWhereUniqueInput>
  }

  export type GameCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GameCreateWithoutUserInput>, Enumerable<GameUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUserInput>
    createMany?: GameCreateManyUserInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type StageCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StageCreateWithoutUserInput>, Enumerable<StageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StageCreateOrConnectWithoutUserInput>
    createMany?: StageCreateManyUserInputEnvelope
    connect?: Enumerable<StageWhereUniqueInput>
  }

  export type UserItemCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserItemCreateWithoutUserInput>, Enumerable<UserItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserItemCreateOrConnectWithoutUserInput>
    createMany?: UserItemCreateManyUserInputEnvelope
    connect?: Enumerable<UserItemWhereUniqueInput>
  }

  export type VoteCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<VoteCreateWithoutUserInput>, Enumerable<VoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutUserInput>
    createMany?: VoteCreateManyUserInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutUserInput>, Enumerable<EnrollmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutUserInput>
    createMany?: EnrollmentCreateManyUserInputEnvelope
    connect?: Enumerable<EnrollmentWhereUniqueInput>
  }

  export type AvatarUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AvatarCreateWithoutUserInput>, Enumerable<AvatarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AvatarCreateOrConnectWithoutUserInput>
    createMany?: AvatarCreateManyUserInputEnvelope
    connect?: Enumerable<AvatarWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GameCreateWithoutUserInput>, Enumerable<GameUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUserInput>
    createMany?: GameCreateManyUserInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type StageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StageCreateWithoutUserInput>, Enumerable<StageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StageCreateOrConnectWithoutUserInput>
    createMany?: StageCreateManyUserInputEnvelope
    connect?: Enumerable<StageWhereUniqueInput>
  }

  export type UserItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserItemCreateWithoutUserInput>, Enumerable<UserItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserItemCreateOrConnectWithoutUserInput>
    createMany?: UserItemCreateManyUserInputEnvelope
    connect?: Enumerable<UserItemWhereUniqueInput>
  }

  export type VoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<VoteCreateWithoutUserInput>, Enumerable<VoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutUserInput>
    createMany?: VoteCreateManyUserInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type EnrollmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutUserInput>, Enumerable<EnrollmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EnrollmentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EnrollmentCreateManyUserInputEnvelope
    set?: Enumerable<EnrollmentWhereUniqueInput>
    disconnect?: Enumerable<EnrollmentWhereUniqueInput>
    delete?: Enumerable<EnrollmentWhereUniqueInput>
    connect?: Enumerable<EnrollmentWhereUniqueInput>
    update?: Enumerable<EnrollmentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EnrollmentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EnrollmentScalarWhereInput>
  }

  export type AvatarUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AvatarCreateWithoutUserInput>, Enumerable<AvatarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AvatarCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AvatarUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AvatarCreateManyUserInputEnvelope
    set?: Enumerable<AvatarWhereUniqueInput>
    disconnect?: Enumerable<AvatarWhereUniqueInput>
    delete?: Enumerable<AvatarWhereUniqueInput>
    connect?: Enumerable<AvatarWhereUniqueInput>
    update?: Enumerable<AvatarUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AvatarUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AvatarScalarWhereInput>
  }

  export type GameUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutUserInput>, Enumerable<GameUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GameCreateManyUserInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type StageUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<StageCreateWithoutUserInput>, Enumerable<StageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StageCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StageUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StageCreateManyUserInputEnvelope
    set?: Enumerable<StageWhereUniqueInput>
    disconnect?: Enumerable<StageWhereUniqueInput>
    delete?: Enumerable<StageWhereUniqueInput>
    connect?: Enumerable<StageWhereUniqueInput>
    update?: Enumerable<StageUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StageUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StageScalarWhereInput>
  }

  export type UserItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserItemCreateWithoutUserInput>, Enumerable<UserItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserItemCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserItemUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserItemCreateManyUserInputEnvelope
    set?: Enumerable<UserItemWhereUniqueInput>
    disconnect?: Enumerable<UserItemWhereUniqueInput>
    delete?: Enumerable<UserItemWhereUniqueInput>
    connect?: Enumerable<UserItemWhereUniqueInput>
    update?: Enumerable<UserItemUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserItemUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserItemScalarWhereInput>
  }

  export type VoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<VoteCreateWithoutUserInput>, Enumerable<VoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: VoteCreateManyUserInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type EnrollmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutUserInput>, Enumerable<EnrollmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EnrollmentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EnrollmentCreateManyUserInputEnvelope
    set?: Enumerable<EnrollmentWhereUniqueInput>
    disconnect?: Enumerable<EnrollmentWhereUniqueInput>
    delete?: Enumerable<EnrollmentWhereUniqueInput>
    connect?: Enumerable<EnrollmentWhereUniqueInput>
    update?: Enumerable<EnrollmentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EnrollmentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EnrollmentScalarWhereInput>
  }

  export type AvatarUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AvatarCreateWithoutUserInput>, Enumerable<AvatarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AvatarCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AvatarUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AvatarCreateManyUserInputEnvelope
    set?: Enumerable<AvatarWhereUniqueInput>
    disconnect?: Enumerable<AvatarWhereUniqueInput>
    delete?: Enumerable<AvatarWhereUniqueInput>
    connect?: Enumerable<AvatarWhereUniqueInput>
    update?: Enumerable<AvatarUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AvatarUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AvatarScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutUserInput>, Enumerable<GameUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GameCreateManyUserInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type StageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<StageCreateWithoutUserInput>, Enumerable<StageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StageCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StageUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StageCreateManyUserInputEnvelope
    set?: Enumerable<StageWhereUniqueInput>
    disconnect?: Enumerable<StageWhereUniqueInput>
    delete?: Enumerable<StageWhereUniqueInput>
    connect?: Enumerable<StageWhereUniqueInput>
    update?: Enumerable<StageUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StageUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StageScalarWhereInput>
  }

  export type UserItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserItemCreateWithoutUserInput>, Enumerable<UserItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserItemCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserItemUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserItemCreateManyUserInputEnvelope
    set?: Enumerable<UserItemWhereUniqueInput>
    disconnect?: Enumerable<UserItemWhereUniqueInput>
    delete?: Enumerable<UserItemWhereUniqueInput>
    connect?: Enumerable<UserItemWhereUniqueInput>
    update?: Enumerable<UserItemUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserItemUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserItemScalarWhereInput>
  }

  export type VoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<VoteCreateWithoutUserInput>, Enumerable<VoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: VoteCreateManyUserInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionNestedInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserCreateNestedOneWithoutEnrollmentInput = {
    create?: XOR<UserCreateWithoutEnrollmentInput, UserUncheckedCreateWithoutEnrollmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEnrollmentNestedInput = {
    create?: XOR<UserCreateWithoutEnrollmentInput, UserUncheckedCreateWithoutEnrollmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentInput
    upsert?: UserUpsertWithoutEnrollmentInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutEnrollmentInput, UserUncheckedUpdateWithoutEnrollmentInput>
  }

  export type UserCreateNestedOneWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput
    connect?: UserWhereUniqueInput
  }

  export type EquipItemCreateNestedManyWithoutAvatarInput = {
    create?: XOR<Enumerable<EquipItemCreateWithoutAvatarInput>, Enumerable<EquipItemUncheckedCreateWithoutAvatarInput>>
    connectOrCreate?: Enumerable<EquipItemCreateOrConnectWithoutAvatarInput>
    createMany?: EquipItemCreateManyAvatarInputEnvelope
    connect?: Enumerable<EquipItemWhereUniqueInput>
  }

  export type AvatarGameCreateNestedManyWithoutAvatarInput = {
    create?: XOR<Enumerable<AvatarGameCreateWithoutAvatarInput>, Enumerable<AvatarGameUncheckedCreateWithoutAvatarInput>>
    connectOrCreate?: Enumerable<AvatarGameCreateOrConnectWithoutAvatarInput>
    createMany?: AvatarGameCreateManyAvatarInputEnvelope
    connect?: Enumerable<AvatarGameWhereUniqueInput>
  }

  export type EquipItemUncheckedCreateNestedManyWithoutAvatarInput = {
    create?: XOR<Enumerable<EquipItemCreateWithoutAvatarInput>, Enumerable<EquipItemUncheckedCreateWithoutAvatarInput>>
    connectOrCreate?: Enumerable<EquipItemCreateOrConnectWithoutAvatarInput>
    createMany?: EquipItemCreateManyAvatarInputEnvelope
    connect?: Enumerable<EquipItemWhereUniqueInput>
  }

  export type AvatarGameUncheckedCreateNestedManyWithoutAvatarInput = {
    create?: XOR<Enumerable<AvatarGameCreateWithoutAvatarInput>, Enumerable<AvatarGameUncheckedCreateWithoutAvatarInput>>
    connectOrCreate?: Enumerable<AvatarGameCreateOrConnectWithoutAvatarInput>
    createMany?: AvatarGameCreateManyAvatarInputEnvelope
    connect?: Enumerable<AvatarGameWhereUniqueInput>
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: Gender
  }

  export type EnumRacesFieldUpdateOperationsInput = {
    set?: Races
  }

  export type EnumClassesFieldUpdateOperationsInput = {
    set?: Classes
  }

  export type EnumSkillsFieldUpdateOperationsInput = {
    set?: Skills
  }

  export type UserUpdateOneRequiredWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput
    upsert?: UserUpsertWithoutAvatarInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
  }

  export type EquipItemUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<Enumerable<EquipItemCreateWithoutAvatarInput>, Enumerable<EquipItemUncheckedCreateWithoutAvatarInput>>
    connectOrCreate?: Enumerable<EquipItemCreateOrConnectWithoutAvatarInput>
    upsert?: Enumerable<EquipItemUpsertWithWhereUniqueWithoutAvatarInput>
    createMany?: EquipItemCreateManyAvatarInputEnvelope
    set?: Enumerable<EquipItemWhereUniqueInput>
    disconnect?: Enumerable<EquipItemWhereUniqueInput>
    delete?: Enumerable<EquipItemWhereUniqueInput>
    connect?: Enumerable<EquipItemWhereUniqueInput>
    update?: Enumerable<EquipItemUpdateWithWhereUniqueWithoutAvatarInput>
    updateMany?: Enumerable<EquipItemUpdateManyWithWhereWithoutAvatarInput>
    deleteMany?: Enumerable<EquipItemScalarWhereInput>
  }

  export type AvatarGameUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<Enumerable<AvatarGameCreateWithoutAvatarInput>, Enumerable<AvatarGameUncheckedCreateWithoutAvatarInput>>
    connectOrCreate?: Enumerable<AvatarGameCreateOrConnectWithoutAvatarInput>
    upsert?: Enumerable<AvatarGameUpsertWithWhereUniqueWithoutAvatarInput>
    createMany?: AvatarGameCreateManyAvatarInputEnvelope
    set?: Enumerable<AvatarGameWhereUniqueInput>
    disconnect?: Enumerable<AvatarGameWhereUniqueInput>
    delete?: Enumerable<AvatarGameWhereUniqueInput>
    connect?: Enumerable<AvatarGameWhereUniqueInput>
    update?: Enumerable<AvatarGameUpdateWithWhereUniqueWithoutAvatarInput>
    updateMany?: Enumerable<AvatarGameUpdateManyWithWhereWithoutAvatarInput>
    deleteMany?: Enumerable<AvatarGameScalarWhereInput>
  }

  export type EquipItemUncheckedUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<Enumerable<EquipItemCreateWithoutAvatarInput>, Enumerable<EquipItemUncheckedCreateWithoutAvatarInput>>
    connectOrCreate?: Enumerable<EquipItemCreateOrConnectWithoutAvatarInput>
    upsert?: Enumerable<EquipItemUpsertWithWhereUniqueWithoutAvatarInput>
    createMany?: EquipItemCreateManyAvatarInputEnvelope
    set?: Enumerable<EquipItemWhereUniqueInput>
    disconnect?: Enumerable<EquipItemWhereUniqueInput>
    delete?: Enumerable<EquipItemWhereUniqueInput>
    connect?: Enumerable<EquipItemWhereUniqueInput>
    update?: Enumerable<EquipItemUpdateWithWhereUniqueWithoutAvatarInput>
    updateMany?: Enumerable<EquipItemUpdateManyWithWhereWithoutAvatarInput>
    deleteMany?: Enumerable<EquipItemScalarWhereInput>
  }

  export type AvatarGameUncheckedUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<Enumerable<AvatarGameCreateWithoutAvatarInput>, Enumerable<AvatarGameUncheckedCreateWithoutAvatarInput>>
    connectOrCreate?: Enumerable<AvatarGameCreateOrConnectWithoutAvatarInput>
    upsert?: Enumerable<AvatarGameUpsertWithWhereUniqueWithoutAvatarInput>
    createMany?: AvatarGameCreateManyAvatarInputEnvelope
    set?: Enumerable<AvatarGameWhereUniqueInput>
    disconnect?: Enumerable<AvatarGameWhereUniqueInput>
    delete?: Enumerable<AvatarGameWhereUniqueInput>
    connect?: Enumerable<AvatarGameWhereUniqueInput>
    update?: Enumerable<AvatarGameUpdateWithWhereUniqueWithoutAvatarInput>
    updateMany?: Enumerable<AvatarGameUpdateManyWithWhereWithoutAvatarInput>
    deleteMany?: Enumerable<AvatarGameScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutGameInput = {
    create?: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameInput
    connect?: UserWhereUniqueInput
  }

  export type AvatarGameCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<AvatarGameCreateWithoutGameInput>, Enumerable<AvatarGameUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<AvatarGameCreateOrConnectWithoutGameInput>
    createMany?: AvatarGameCreateManyGameInputEnvelope
    connect?: Enumerable<AvatarGameWhereUniqueInput>
  }

  export type GameStageCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<GameStageCreateWithoutGameInput>, Enumerable<GameStageUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<GameStageCreateOrConnectWithoutGameInput>
    createMany?: GameStageCreateManyGameInputEnvelope
    connect?: Enumerable<GameStageWhereUniqueInput>
  }

  export type VoteCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<VoteCreateWithoutGameInput>, Enumerable<VoteUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutGameInput>
    createMany?: VoteCreateManyGameInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type AvatarGameUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<AvatarGameCreateWithoutGameInput>, Enumerable<AvatarGameUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<AvatarGameCreateOrConnectWithoutGameInput>
    createMany?: AvatarGameCreateManyGameInputEnvelope
    connect?: Enumerable<AvatarGameWhereUniqueInput>
  }

  export type GameStageUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<GameStageCreateWithoutGameInput>, Enumerable<GameStageUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<GameStageCreateOrConnectWithoutGameInput>
    createMany?: GameStageCreateManyGameInputEnvelope
    connect?: Enumerable<GameStageWhereUniqueInput>
  }

  export type VoteUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<VoteCreateWithoutGameInput>, Enumerable<VoteUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutGameInput>
    createMany?: VoteCreateManyGameInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutGameNestedInput = {
    create?: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameInput
    upsert?: UserUpsertWithoutGameInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGameInput, UserUncheckedUpdateWithoutGameInput>
  }

  export type AvatarGameUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<AvatarGameCreateWithoutGameInput>, Enumerable<AvatarGameUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<AvatarGameCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<AvatarGameUpsertWithWhereUniqueWithoutGameInput>
    createMany?: AvatarGameCreateManyGameInputEnvelope
    set?: Enumerable<AvatarGameWhereUniqueInput>
    disconnect?: Enumerable<AvatarGameWhereUniqueInput>
    delete?: Enumerable<AvatarGameWhereUniqueInput>
    connect?: Enumerable<AvatarGameWhereUniqueInput>
    update?: Enumerable<AvatarGameUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<AvatarGameUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<AvatarGameScalarWhereInput>
  }

  export type GameStageUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<GameStageCreateWithoutGameInput>, Enumerable<GameStageUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<GameStageCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<GameStageUpsertWithWhereUniqueWithoutGameInput>
    createMany?: GameStageCreateManyGameInputEnvelope
    set?: Enumerable<GameStageWhereUniqueInput>
    disconnect?: Enumerable<GameStageWhereUniqueInput>
    delete?: Enumerable<GameStageWhereUniqueInput>
    connect?: Enumerable<GameStageWhereUniqueInput>
    update?: Enumerable<GameStageUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<GameStageUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<GameStageScalarWhereInput>
  }

  export type VoteUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<VoteCreateWithoutGameInput>, Enumerable<VoteUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutGameInput>
    createMany?: VoteCreateManyGameInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type AvatarGameUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<AvatarGameCreateWithoutGameInput>, Enumerable<AvatarGameUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<AvatarGameCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<AvatarGameUpsertWithWhereUniqueWithoutGameInput>
    createMany?: AvatarGameCreateManyGameInputEnvelope
    set?: Enumerable<AvatarGameWhereUniqueInput>
    disconnect?: Enumerable<AvatarGameWhereUniqueInput>
    delete?: Enumerable<AvatarGameWhereUniqueInput>
    connect?: Enumerable<AvatarGameWhereUniqueInput>
    update?: Enumerable<AvatarGameUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<AvatarGameUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<AvatarGameScalarWhereInput>
  }

  export type GameStageUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<GameStageCreateWithoutGameInput>, Enumerable<GameStageUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<GameStageCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<GameStageUpsertWithWhereUniqueWithoutGameInput>
    createMany?: GameStageCreateManyGameInputEnvelope
    set?: Enumerable<GameStageWhereUniqueInput>
    disconnect?: Enumerable<GameStageWhereUniqueInput>
    delete?: Enumerable<GameStageWhereUniqueInput>
    connect?: Enumerable<GameStageWhereUniqueInput>
    update?: Enumerable<GameStageUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<GameStageUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<GameStageScalarWhereInput>
  }

  export type VoteUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<VoteCreateWithoutGameInput>, Enumerable<VoteUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutGameInput>
    createMany?: VoteCreateManyGameInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type AvatarCreateNestedOneWithoutAvatarGameInput = {
    create?: XOR<AvatarCreateWithoutAvatarGameInput, AvatarUncheckedCreateWithoutAvatarGameInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutAvatarGameInput
    connect?: AvatarWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutAvatarGameInput = {
    create?: XOR<GameCreateWithoutAvatarGameInput, GameUncheckedCreateWithoutAvatarGameInput>
    connectOrCreate?: GameCreateOrConnectWithoutAvatarGameInput
    connect?: GameWhereUniqueInput
  }

  export type AvatarUpdateOneRequiredWithoutAvatarGameNestedInput = {
    create?: XOR<AvatarCreateWithoutAvatarGameInput, AvatarUncheckedCreateWithoutAvatarGameInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutAvatarGameInput
    upsert?: AvatarUpsertWithoutAvatarGameInput
    connect?: AvatarWhereUniqueInput
    update?: XOR<AvatarUpdateWithoutAvatarGameInput, AvatarUncheckedUpdateWithoutAvatarGameInput>
  }

  export type GameUpdateOneRequiredWithoutAvatarGameNestedInput = {
    create?: XOR<GameCreateWithoutAvatarGameInput, GameUncheckedCreateWithoutAvatarGameInput>
    connectOrCreate?: GameCreateOrConnectWithoutAvatarGameInput
    upsert?: GameUpsertWithoutAvatarGameInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutAvatarGameInput, GameUncheckedUpdateWithoutAvatarGameInput>
  }

  export type UserCreateNestedOneWithoutStageInput = {
    create?: XOR<UserCreateWithoutStageInput, UserUncheckedCreateWithoutStageInput>
    connectOrCreate?: UserCreateOrConnectWithoutStageInput
    connect?: UserWhereUniqueInput
  }

  export type GameStageCreateNestedManyWithoutStageInput = {
    create?: XOR<Enumerable<GameStageCreateWithoutStageInput>, Enumerable<GameStageUncheckedCreateWithoutStageInput>>
    connectOrCreate?: Enumerable<GameStageCreateOrConnectWithoutStageInput>
    createMany?: GameStageCreateManyStageInputEnvelope
    connect?: Enumerable<GameStageWhereUniqueInput>
  }

  export type GameStageUncheckedCreateNestedManyWithoutStageInput = {
    create?: XOR<Enumerable<GameStageCreateWithoutStageInput>, Enumerable<GameStageUncheckedCreateWithoutStageInput>>
    connectOrCreate?: Enumerable<GameStageCreateOrConnectWithoutStageInput>
    createMany?: GameStageCreateManyStageInputEnvelope
    connect?: Enumerable<GameStageWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutStageNestedInput = {
    create?: XOR<UserCreateWithoutStageInput, UserUncheckedCreateWithoutStageInput>
    connectOrCreate?: UserCreateOrConnectWithoutStageInput
    upsert?: UserUpsertWithoutStageInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutStageInput, UserUncheckedUpdateWithoutStageInput>
  }

  export type GameStageUpdateManyWithoutStageNestedInput = {
    create?: XOR<Enumerable<GameStageCreateWithoutStageInput>, Enumerable<GameStageUncheckedCreateWithoutStageInput>>
    connectOrCreate?: Enumerable<GameStageCreateOrConnectWithoutStageInput>
    upsert?: Enumerable<GameStageUpsertWithWhereUniqueWithoutStageInput>
    createMany?: GameStageCreateManyStageInputEnvelope
    set?: Enumerable<GameStageWhereUniqueInput>
    disconnect?: Enumerable<GameStageWhereUniqueInput>
    delete?: Enumerable<GameStageWhereUniqueInput>
    connect?: Enumerable<GameStageWhereUniqueInput>
    update?: Enumerable<GameStageUpdateWithWhereUniqueWithoutStageInput>
    updateMany?: Enumerable<GameStageUpdateManyWithWhereWithoutStageInput>
    deleteMany?: Enumerable<GameStageScalarWhereInput>
  }

  export type GameStageUncheckedUpdateManyWithoutStageNestedInput = {
    create?: XOR<Enumerable<GameStageCreateWithoutStageInput>, Enumerable<GameStageUncheckedCreateWithoutStageInput>>
    connectOrCreate?: Enumerable<GameStageCreateOrConnectWithoutStageInput>
    upsert?: Enumerable<GameStageUpsertWithWhereUniqueWithoutStageInput>
    createMany?: GameStageCreateManyStageInputEnvelope
    set?: Enumerable<GameStageWhereUniqueInput>
    disconnect?: Enumerable<GameStageWhereUniqueInput>
    delete?: Enumerable<GameStageWhereUniqueInput>
    connect?: Enumerable<GameStageWhereUniqueInput>
    update?: Enumerable<GameStageUpdateWithWhereUniqueWithoutStageInput>
    updateMany?: Enumerable<GameStageUpdateManyWithWhereWithoutStageInput>
    deleteMany?: Enumerable<GameStageScalarWhereInput>
  }

  export type GameCreateNestedOneWithoutGameStageInput = {
    create?: XOR<GameCreateWithoutGameStageInput, GameUncheckedCreateWithoutGameStageInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameStageInput
    connect?: GameWhereUniqueInput
  }

  export type StageCreateNestedOneWithoutGameStageInput = {
    create?: XOR<StageCreateWithoutGameStageInput, StageUncheckedCreateWithoutGameStageInput>
    connectOrCreate?: StageCreateOrConnectWithoutGameStageInput
    connect?: StageWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutGameStageNestedInput = {
    create?: XOR<GameCreateWithoutGameStageInput, GameUncheckedCreateWithoutGameStageInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameStageInput
    upsert?: GameUpsertWithoutGameStageInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutGameStageInput, GameUncheckedUpdateWithoutGameStageInput>
  }

  export type StageUpdateOneRequiredWithoutGameStageNestedInput = {
    create?: XOR<StageCreateWithoutGameStageInput, StageUncheckedCreateWithoutGameStageInput>
    connectOrCreate?: StageCreateOrConnectWithoutGameStageInput
    upsert?: StageUpsertWithoutGameStageInput
    connect?: StageWhereUniqueInput
    update?: XOR<StageUpdateWithoutGameStageInput, StageUncheckedUpdateWithoutGameStageInput>
  }

  export type UserItemCreateNestedManyWithoutItemInput = {
    create?: XOR<Enumerable<UserItemCreateWithoutItemInput>, Enumerable<UserItemUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<UserItemCreateOrConnectWithoutItemInput>
    createMany?: UserItemCreateManyItemInputEnvelope
    connect?: Enumerable<UserItemWhereUniqueInput>
  }

  export type EquipItemCreateNestedManyWithoutItemInput = {
    create?: XOR<Enumerable<EquipItemCreateWithoutItemInput>, Enumerable<EquipItemUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<EquipItemCreateOrConnectWithoutItemInput>
    createMany?: EquipItemCreateManyItemInputEnvelope
    connect?: Enumerable<EquipItemWhereUniqueInput>
  }

  export type UserItemUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<Enumerable<UserItemCreateWithoutItemInput>, Enumerable<UserItemUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<UserItemCreateOrConnectWithoutItemInput>
    createMany?: UserItemCreateManyItemInputEnvelope
    connect?: Enumerable<UserItemWhereUniqueInput>
  }

  export type EquipItemUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<Enumerable<EquipItemCreateWithoutItemInput>, Enumerable<EquipItemUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<EquipItemCreateOrConnectWithoutItemInput>
    createMany?: EquipItemCreateManyItemInputEnvelope
    connect?: Enumerable<EquipItemWhereUniqueInput>
  }

  export type UserItemUpdateManyWithoutItemNestedInput = {
    create?: XOR<Enumerable<UserItemCreateWithoutItemInput>, Enumerable<UserItemUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<UserItemCreateOrConnectWithoutItemInput>
    upsert?: Enumerable<UserItemUpsertWithWhereUniqueWithoutItemInput>
    createMany?: UserItemCreateManyItemInputEnvelope
    set?: Enumerable<UserItemWhereUniqueInput>
    disconnect?: Enumerable<UserItemWhereUniqueInput>
    delete?: Enumerable<UserItemWhereUniqueInput>
    connect?: Enumerable<UserItemWhereUniqueInput>
    update?: Enumerable<UserItemUpdateWithWhereUniqueWithoutItemInput>
    updateMany?: Enumerable<UserItemUpdateManyWithWhereWithoutItemInput>
    deleteMany?: Enumerable<UserItemScalarWhereInput>
  }

  export type EquipItemUpdateManyWithoutItemNestedInput = {
    create?: XOR<Enumerable<EquipItemCreateWithoutItemInput>, Enumerable<EquipItemUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<EquipItemCreateOrConnectWithoutItemInput>
    upsert?: Enumerable<EquipItemUpsertWithWhereUniqueWithoutItemInput>
    createMany?: EquipItemCreateManyItemInputEnvelope
    set?: Enumerable<EquipItemWhereUniqueInput>
    disconnect?: Enumerable<EquipItemWhereUniqueInput>
    delete?: Enumerable<EquipItemWhereUniqueInput>
    connect?: Enumerable<EquipItemWhereUniqueInput>
    update?: Enumerable<EquipItemUpdateWithWhereUniqueWithoutItemInput>
    updateMany?: Enumerable<EquipItemUpdateManyWithWhereWithoutItemInput>
    deleteMany?: Enumerable<EquipItemScalarWhereInput>
  }

  export type UserItemUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<Enumerable<UserItemCreateWithoutItemInput>, Enumerable<UserItemUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<UserItemCreateOrConnectWithoutItemInput>
    upsert?: Enumerable<UserItemUpsertWithWhereUniqueWithoutItemInput>
    createMany?: UserItemCreateManyItemInputEnvelope
    set?: Enumerable<UserItemWhereUniqueInput>
    disconnect?: Enumerable<UserItemWhereUniqueInput>
    delete?: Enumerable<UserItemWhereUniqueInput>
    connect?: Enumerable<UserItemWhereUniqueInput>
    update?: Enumerable<UserItemUpdateWithWhereUniqueWithoutItemInput>
    updateMany?: Enumerable<UserItemUpdateManyWithWhereWithoutItemInput>
    deleteMany?: Enumerable<UserItemScalarWhereInput>
  }

  export type EquipItemUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<Enumerable<EquipItemCreateWithoutItemInput>, Enumerable<EquipItemUncheckedCreateWithoutItemInput>>
    connectOrCreate?: Enumerable<EquipItemCreateOrConnectWithoutItemInput>
    upsert?: Enumerable<EquipItemUpsertWithWhereUniqueWithoutItemInput>
    createMany?: EquipItemCreateManyItemInputEnvelope
    set?: Enumerable<EquipItemWhereUniqueInput>
    disconnect?: Enumerable<EquipItemWhereUniqueInput>
    delete?: Enumerable<EquipItemWhereUniqueInput>
    connect?: Enumerable<EquipItemWhereUniqueInput>
    update?: Enumerable<EquipItemUpdateWithWhereUniqueWithoutItemInput>
    updateMany?: Enumerable<EquipItemUpdateManyWithWhereWithoutItemInput>
    deleteMany?: Enumerable<EquipItemScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserItemInput = {
    create?: XOR<UserCreateWithoutUserItemInput, UserUncheckedCreateWithoutUserItemInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserItemInput
    connect?: UserWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutUserItemInput = {
    create?: XOR<ItemCreateWithoutUserItemInput, ItemUncheckedCreateWithoutUserItemInput>
    connectOrCreate?: ItemCreateOrConnectWithoutUserItemInput
    connect?: ItemWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserItemNestedInput = {
    create?: XOR<UserCreateWithoutUserItemInput, UserUncheckedCreateWithoutUserItemInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserItemInput
    upsert?: UserUpsertWithoutUserItemInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserItemInput, UserUncheckedUpdateWithoutUserItemInput>
  }

  export type ItemUpdateOneRequiredWithoutUserItemNestedInput = {
    create?: XOR<ItemCreateWithoutUserItemInput, ItemUncheckedCreateWithoutUserItemInput>
    connectOrCreate?: ItemCreateOrConnectWithoutUserItemInput
    upsert?: ItemUpsertWithoutUserItemInput
    connect?: ItemWhereUniqueInput
    update?: XOR<ItemUpdateWithoutUserItemInput, ItemUncheckedUpdateWithoutUserItemInput>
  }

  export type AvatarCreateNestedOneWithoutEquipItemInput = {
    create?: XOR<AvatarCreateWithoutEquipItemInput, AvatarUncheckedCreateWithoutEquipItemInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutEquipItemInput
    connect?: AvatarWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutEquipItemInput = {
    create?: XOR<ItemCreateWithoutEquipItemInput, ItemUncheckedCreateWithoutEquipItemInput>
    connectOrCreate?: ItemCreateOrConnectWithoutEquipItemInput
    connect?: ItemWhereUniqueInput
  }

  export type AvatarUpdateOneRequiredWithoutEquipItemNestedInput = {
    create?: XOR<AvatarCreateWithoutEquipItemInput, AvatarUncheckedCreateWithoutEquipItemInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutEquipItemInput
    upsert?: AvatarUpsertWithoutEquipItemInput
    connect?: AvatarWhereUniqueInput
    update?: XOR<AvatarUpdateWithoutEquipItemInput, AvatarUncheckedUpdateWithoutEquipItemInput>
  }

  export type ItemUpdateOneRequiredWithoutEquipItemNestedInput = {
    create?: XOR<ItemCreateWithoutEquipItemInput, ItemUncheckedCreateWithoutEquipItemInput>
    connectOrCreate?: ItemCreateOrConnectWithoutEquipItemInput
    upsert?: ItemUpsertWithoutEquipItemInput
    connect?: ItemWhereUniqueInput
    update?: XOR<ItemUpdateWithoutEquipItemInput, ItemUncheckedUpdateWithoutEquipItemInput>
  }

  export type UserCreateNestedOneWithoutVoteInput = {
    create?: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutVoteInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutVoteInput = {
    create?: XOR<GameCreateWithoutVoteInput, GameUncheckedCreateWithoutVoteInput>
    connectOrCreate?: GameCreateOrConnectWithoutVoteInput
    connect?: GameWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVoteNestedInput = {
    create?: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutVoteInput
    upsert?: UserUpsertWithoutVoteInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutVoteInput, UserUncheckedUpdateWithoutVoteInput>
  }

  export type GameUpdateOneRequiredWithoutVoteNestedInput = {
    create?: XOR<GameCreateWithoutVoteInput, GameUncheckedCreateWithoutVoteInput>
    connectOrCreate?: GameCreateOrConnectWithoutVoteInput
    upsert?: GameUpsertWithoutVoteInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutVoteInput, GameUncheckedUpdateWithoutVoteInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumGenderFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: NestedEnumGenderFilter | Gender
  }

  export type NestedEnumRacesFilter = {
    equals?: Races
    in?: Enumerable<Races>
    notIn?: Enumerable<Races>
    not?: NestedEnumRacesFilter | Races
  }

  export type NestedEnumClassesFilter = {
    equals?: Classes
    in?: Enumerable<Classes>
    notIn?: Enumerable<Classes>
    not?: NestedEnumClassesFilter | Classes
  }

  export type NestedEnumSkillsFilter = {
    equals?: Skills
    in?: Enumerable<Skills>
    notIn?: Enumerable<Skills>
    not?: NestedEnumSkillsFilter | Skills
  }

  export type NestedEnumGenderWithAggregatesFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: NestedEnumGenderWithAggregatesFilter | Gender
    _count?: NestedIntFilter
    _min?: NestedEnumGenderFilter
    _max?: NestedEnumGenderFilter
  }

  export type NestedEnumRacesWithAggregatesFilter = {
    equals?: Races
    in?: Enumerable<Races>
    notIn?: Enumerable<Races>
    not?: NestedEnumRacesWithAggregatesFilter | Races
    _count?: NestedIntFilter
    _min?: NestedEnumRacesFilter
    _max?: NestedEnumRacesFilter
  }

  export type NestedEnumClassesWithAggregatesFilter = {
    equals?: Classes
    in?: Enumerable<Classes>
    notIn?: Enumerable<Classes>
    not?: NestedEnumClassesWithAggregatesFilter | Classes
    _count?: NestedIntFilter
    _min?: NestedEnumClassesFilter
    _max?: NestedEnumClassesFilter
  }

  export type NestedEnumSkillsWithAggregatesFilter = {
    equals?: Skills
    in?: Enumerable<Skills>
    notIn?: Enumerable<Skills>
    not?: NestedEnumSkillsWithAggregatesFilter | Skills
    _count?: NestedIntFilter
    _min?: NestedEnumSkillsFilter
    _max?: NestedEnumSkillsFilter
  }

  export type SessionCreateWithoutUserInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type EnrollmentCreateWithoutUserInput = {
    name: string
    birthday: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    birthday: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentCreateOrConnectWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentCreateManyUserInputEnvelope = {
    data: Enumerable<EnrollmentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AvatarCreateWithoutUserInput = {
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    createdAt?: Date | string
    updatedAt?: Date | string
    EquipItem?: EquipItemCreateNestedManyWithoutAvatarInput
    AvatarGame?: AvatarGameCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUncheckedCreateWithoutUserInput = {
    id?: number
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    createdAt?: Date | string
    updatedAt?: Date | string
    EquipItem?: EquipItemUncheckedCreateNestedManyWithoutAvatarInput
    AvatarGame?: AvatarGameUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type AvatarCreateOrConnectWithoutUserInput = {
    where: AvatarWhereUniqueInput
    create: XOR<AvatarCreateWithoutUserInput, AvatarUncheckedCreateWithoutUserInput>
  }

  export type AvatarCreateManyUserInputEnvelope = {
    data: Enumerable<AvatarCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutUserInput = {
    name: string
    level: number
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameCreateNestedManyWithoutGameInput
    GameStage?: GameStageCreateNestedManyWithoutGameInput
    Vote?: VoteCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    level: number
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameUncheckedCreateNestedManyWithoutGameInput
    GameStage?: GameStageUncheckedCreateNestedManyWithoutGameInput
    Vote?: VoteUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutUserInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
  }

  export type GameCreateManyUserInputEnvelope = {
    data: Enumerable<GameCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutUserInput = {
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    GameStage?: GameStageCreateNestedManyWithoutStageInput
  }

  export type StageUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    GameStage?: GameStageUncheckedCreateNestedManyWithoutStageInput
  }

  export type StageCreateOrConnectWithoutUserInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutUserInput, StageUncheckedCreateWithoutUserInput>
  }

  export type StageCreateManyUserInputEnvelope = {
    data: Enumerable<StageCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserItemCreateWithoutUserInput = {
    Item: ItemCreateNestedOneWithoutUserItemInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemUncheckedCreateWithoutUserInput = {
    id?: number
    itemId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemCreateOrConnectWithoutUserInput = {
    where: UserItemWhereUniqueInput
    create: XOR<UserItemCreateWithoutUserInput, UserItemUncheckedCreateWithoutUserInput>
  }

  export type UserItemCreateManyUserInputEnvelope = {
    data: Enumerable<UserItemCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type VoteCreateWithoutUserInput = {
    note: number
    post: string
    Game: GameCreateNestedOneWithoutVoteInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteUncheckedCreateWithoutUserInput = {
    id?: number
    note: number
    post: string
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteCreateOrConnectWithoutUserInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutUserInput, VoteUncheckedCreateWithoutUserInput>
  }

  export type VoteCreateManyUserInputEnvelope = {
    data: Enumerable<VoteCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutUserInput, EnrollmentUncheckedUpdateWithoutUserInput>
    create: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutUserInput, EnrollmentUncheckedUpdateWithoutUserInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutUserInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutEnrollmentInput>
  }

  export type EnrollmentScalarWhereInput = {
    AND?: Enumerable<EnrollmentScalarWhereInput>
    OR?: Enumerable<EnrollmentScalarWhereInput>
    NOT?: Enumerable<EnrollmentScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    birthday?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AvatarUpsertWithWhereUniqueWithoutUserInput = {
    where: AvatarWhereUniqueInput
    update: XOR<AvatarUpdateWithoutUserInput, AvatarUncheckedUpdateWithoutUserInput>
    create: XOR<AvatarCreateWithoutUserInput, AvatarUncheckedCreateWithoutUserInput>
  }

  export type AvatarUpdateWithWhereUniqueWithoutUserInput = {
    where: AvatarWhereUniqueInput
    data: XOR<AvatarUpdateWithoutUserInput, AvatarUncheckedUpdateWithoutUserInput>
  }

  export type AvatarUpdateManyWithWhereWithoutUserInput = {
    where: AvatarScalarWhereInput
    data: XOR<AvatarUpdateManyMutationInput, AvatarUncheckedUpdateManyWithoutAvatarInput>
  }

  export type AvatarScalarWhereInput = {
    AND?: Enumerable<AvatarScalarWhereInput>
    OR?: Enumerable<AvatarScalarWhereInput>
    NOT?: Enumerable<AvatarScalarWhereInput>
    id?: IntFilter | number
    nick?: StringFilter | string
    stamina?: IntFilter | number
    mana?: IntFilter | number
    level?: IntFilter | number
    xp?: IntFilter | number
    gold?: IntFilter | number
    identity?: EnumGenderFilter | Gender
    breed?: EnumRacesFilter | Races
    class?: EnumClassesFilter | Classes
    skill?: EnumSkillsFilter | Skills
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GameUpsertWithWhereUniqueWithoutUserInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutUserInput, GameUncheckedUpdateWithoutUserInput>
    create: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
  }

  export type GameUpdateWithWhereUniqueWithoutUserInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutUserInput, GameUncheckedUpdateWithoutUserInput>
  }

  export type GameUpdateManyWithWhereWithoutUserInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGameInput>
  }

  export type GameScalarWhereInput = {
    AND?: Enumerable<GameScalarWhereInput>
    OR?: Enumerable<GameScalarWhereInput>
    NOT?: Enumerable<GameScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    level?: IntFilter | number
    description?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type StageUpsertWithWhereUniqueWithoutUserInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutUserInput, StageUncheckedUpdateWithoutUserInput>
    create: XOR<StageCreateWithoutUserInput, StageUncheckedCreateWithoutUserInput>
  }

  export type StageUpdateWithWhereUniqueWithoutUserInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutUserInput, StageUncheckedUpdateWithoutUserInput>
  }

  export type StageUpdateManyWithWhereWithoutUserInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutStageInput>
  }

  export type StageScalarWhereInput = {
    AND?: Enumerable<StageScalarWhereInput>
    OR?: Enumerable<StageScalarWhereInput>
    NOT?: Enumerable<StageScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    options?: StringFilter | string
    description?: StringFilter | string
    objects?: StringFilter | string
    refStageId?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserItemUpsertWithWhereUniqueWithoutUserInput = {
    where: UserItemWhereUniqueInput
    update: XOR<UserItemUpdateWithoutUserInput, UserItemUncheckedUpdateWithoutUserInput>
    create: XOR<UserItemCreateWithoutUserInput, UserItemUncheckedCreateWithoutUserInput>
  }

  export type UserItemUpdateWithWhereUniqueWithoutUserInput = {
    where: UserItemWhereUniqueInput
    data: XOR<UserItemUpdateWithoutUserInput, UserItemUncheckedUpdateWithoutUserInput>
  }

  export type UserItemUpdateManyWithWhereWithoutUserInput = {
    where: UserItemScalarWhereInput
    data: XOR<UserItemUpdateManyMutationInput, UserItemUncheckedUpdateManyWithoutUserItemInput>
  }

  export type UserItemScalarWhereInput = {
    AND?: Enumerable<UserItemScalarWhereInput>
    OR?: Enumerable<UserItemScalarWhereInput>
    NOT?: Enumerable<UserItemScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    itemId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type VoteUpsertWithWhereUniqueWithoutUserInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutUserInput, VoteUncheckedUpdateWithoutUserInput>
    create: XOR<VoteCreateWithoutUserInput, VoteUncheckedCreateWithoutUserInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutUserInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutUserInput, VoteUncheckedUpdateWithoutUserInput>
  }

  export type VoteUpdateManyWithWhereWithoutUserInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutVoteInput>
  }

  export type VoteScalarWhereInput = {
    AND?: Enumerable<VoteScalarWhereInput>
    OR?: Enumerable<VoteScalarWhereInput>
    NOT?: Enumerable<VoteScalarWhereInput>
    id?: IntFilter | number
    note?: IntFilter | number
    post?: StringFilter | string
    userId?: IntFilter | number
    gameId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutSessionInput = {
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Enrollment?: EnrollmentCreateNestedManyWithoutUserInput
    Avatar?: AvatarCreateNestedManyWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    Stage?: StageCreateNestedManyWithoutUserInput
    UserItem?: UserItemCreateNestedManyWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    Avatar?: AvatarUncheckedCreateNestedManyWithoutUserInput
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    Stage?: StageUncheckedCreateNestedManyWithoutUserInput
    UserItem?: UserItemUncheckedCreateNestedManyWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Enrollment?: EnrollmentUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUpdateManyWithoutUserNestedInput
    Game?: GameUpdateManyWithoutUserNestedInput
    Stage?: StageUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUpdateManyWithoutUserNestedInput
    Vote?: VoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUncheckedUpdateManyWithoutUserNestedInput
    Game?: GameUncheckedUpdateManyWithoutUserNestedInput
    Stage?: StageUncheckedUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUncheckedUpdateManyWithoutUserNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutEnrollmentInput = {
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Avatar?: AvatarCreateNestedManyWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    Stage?: StageCreateNestedManyWithoutUserInput
    UserItem?: UserItemCreateNestedManyWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEnrollmentInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Avatar?: AvatarUncheckedCreateNestedManyWithoutUserInput
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    Stage?: StageUncheckedCreateNestedManyWithoutUserInput
    UserItem?: UserItemUncheckedCreateNestedManyWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEnrollmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrollmentInput, UserUncheckedCreateWithoutEnrollmentInput>
  }

  export type UserUpsertWithoutEnrollmentInput = {
    update: XOR<UserUpdateWithoutEnrollmentInput, UserUncheckedUpdateWithoutEnrollmentInput>
    create: XOR<UserCreateWithoutEnrollmentInput, UserUncheckedCreateWithoutEnrollmentInput>
  }

  export type UserUpdateWithoutEnrollmentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUpdateManyWithoutUserNestedInput
    Game?: GameUpdateManyWithoutUserNestedInput
    Stage?: StageUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUpdateManyWithoutUserNestedInput
    Vote?: VoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrollmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUncheckedUpdateManyWithoutUserNestedInput
    Game?: GameUncheckedUpdateManyWithoutUserNestedInput
    Stage?: StageUncheckedUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUncheckedUpdateManyWithoutUserNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAvatarInput = {
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentCreateNestedManyWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    Stage?: StageCreateNestedManyWithoutUserInput
    UserItem?: UserItemCreateNestedManyWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAvatarInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    Stage?: StageUncheckedCreateNestedManyWithoutUserInput
    UserItem?: UserItemUncheckedCreateNestedManyWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAvatarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type EquipItemCreateWithoutAvatarInput = {
    handRigthId: number
    handLeftId: number
    Item: ItemCreateNestedOneWithoutEquipItemInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemUncheckedCreateWithoutAvatarInput = {
    id?: number
    amuletId: number
    handRigthId: number
    handLeftId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemCreateOrConnectWithoutAvatarInput = {
    where: EquipItemWhereUniqueInput
    create: XOR<EquipItemCreateWithoutAvatarInput, EquipItemUncheckedCreateWithoutAvatarInput>
  }

  export type EquipItemCreateManyAvatarInputEnvelope = {
    data: Enumerable<EquipItemCreateManyAvatarInput>
    skipDuplicates?: boolean
  }

  export type AvatarGameCreateWithoutAvatarInput = {
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    Game: GameCreateNestedOneWithoutAvatarGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameUncheckedCreateWithoutAvatarInput = {
    id?: number
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameCreateOrConnectWithoutAvatarInput = {
    where: AvatarGameWhereUniqueInput
    create: XOR<AvatarGameCreateWithoutAvatarInput, AvatarGameUncheckedCreateWithoutAvatarInput>
  }

  export type AvatarGameCreateManyAvatarInputEnvelope = {
    data: Enumerable<AvatarGameCreateManyAvatarInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAvatarInput = {
    update: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserUpdateWithoutAvatarInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutUserNestedInput
    Game?: GameUpdateManyWithoutUserNestedInput
    Stage?: StageUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUpdateManyWithoutUserNestedInput
    Vote?: VoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    Game?: GameUncheckedUpdateManyWithoutUserNestedInput
    Stage?: StageUncheckedUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUncheckedUpdateManyWithoutUserNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EquipItemUpsertWithWhereUniqueWithoutAvatarInput = {
    where: EquipItemWhereUniqueInput
    update: XOR<EquipItemUpdateWithoutAvatarInput, EquipItemUncheckedUpdateWithoutAvatarInput>
    create: XOR<EquipItemCreateWithoutAvatarInput, EquipItemUncheckedCreateWithoutAvatarInput>
  }

  export type EquipItemUpdateWithWhereUniqueWithoutAvatarInput = {
    where: EquipItemWhereUniqueInput
    data: XOR<EquipItemUpdateWithoutAvatarInput, EquipItemUncheckedUpdateWithoutAvatarInput>
  }

  export type EquipItemUpdateManyWithWhereWithoutAvatarInput = {
    where: EquipItemScalarWhereInput
    data: XOR<EquipItemUpdateManyMutationInput, EquipItemUncheckedUpdateManyWithoutEquipItemInput>
  }

  export type EquipItemScalarWhereInput = {
    AND?: Enumerable<EquipItemScalarWhereInput>
    OR?: Enumerable<EquipItemScalarWhereInput>
    NOT?: Enumerable<EquipItemScalarWhereInput>
    id?: IntFilter | number
    avatarId?: IntFilter | number
    amuletId?: IntFilter | number
    handRigthId?: IntFilter | number
    handLeftId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AvatarGameUpsertWithWhereUniqueWithoutAvatarInput = {
    where: AvatarGameWhereUniqueInput
    update: XOR<AvatarGameUpdateWithoutAvatarInput, AvatarGameUncheckedUpdateWithoutAvatarInput>
    create: XOR<AvatarGameCreateWithoutAvatarInput, AvatarGameUncheckedCreateWithoutAvatarInput>
  }

  export type AvatarGameUpdateWithWhereUniqueWithoutAvatarInput = {
    where: AvatarGameWhereUniqueInput
    data: XOR<AvatarGameUpdateWithoutAvatarInput, AvatarGameUncheckedUpdateWithoutAvatarInput>
  }

  export type AvatarGameUpdateManyWithWhereWithoutAvatarInput = {
    where: AvatarGameScalarWhereInput
    data: XOR<AvatarGameUpdateManyMutationInput, AvatarGameUncheckedUpdateManyWithoutAvatarGameInput>
  }

  export type AvatarGameScalarWhereInput = {
    AND?: Enumerable<AvatarGameScalarWhereInput>
    OR?: Enumerable<AvatarGameScalarWhereInput>
    NOT?: Enumerable<AvatarGameScalarWhereInput>
    id?: IntFilter | number
    stage?: StringFilter | string
    finished?: BoolFilter | boolean
    position?: IntFilter | number
    skill?: BoolFilter | boolean
    avatarId?: IntFilter | number
    gameId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutGameInput = {
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentCreateNestedManyWithoutUserInput
    Avatar?: AvatarCreateNestedManyWithoutUserInput
    Stage?: StageCreateNestedManyWithoutUserInput
    UserItem?: UserItemCreateNestedManyWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGameInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    Avatar?: AvatarUncheckedCreateNestedManyWithoutUserInput
    Stage?: StageUncheckedCreateNestedManyWithoutUserInput
    UserItem?: UserItemUncheckedCreateNestedManyWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGameInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
  }

  export type AvatarGameCreateWithoutGameInput = {
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    Avatar: AvatarCreateNestedOneWithoutAvatarGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameUncheckedCreateWithoutGameInput = {
    id?: number
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    avatarId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameCreateOrConnectWithoutGameInput = {
    where: AvatarGameWhereUniqueInput
    create: XOR<AvatarGameCreateWithoutGameInput, AvatarGameUncheckedCreateWithoutGameInput>
  }

  export type AvatarGameCreateManyGameInputEnvelope = {
    data: Enumerable<AvatarGameCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type GameStageCreateWithoutGameInput = {
    position: number
    Stage: StageCreateNestedOneWithoutGameStageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageUncheckedCreateWithoutGameInput = {
    id?: number
    position: number
    stageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageCreateOrConnectWithoutGameInput = {
    where: GameStageWhereUniqueInput
    create: XOR<GameStageCreateWithoutGameInput, GameStageUncheckedCreateWithoutGameInput>
  }

  export type GameStageCreateManyGameInputEnvelope = {
    data: Enumerable<GameStageCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type VoteCreateWithoutGameInput = {
    note: number
    post: string
    User: UserCreateNestedOneWithoutVoteInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteUncheckedCreateWithoutGameInput = {
    id?: number
    note: number
    post: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteCreateOrConnectWithoutGameInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutGameInput, VoteUncheckedCreateWithoutGameInput>
  }

  export type VoteCreateManyGameInputEnvelope = {
    data: Enumerable<VoteCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutGameInput = {
    update: XOR<UserUpdateWithoutGameInput, UserUncheckedUpdateWithoutGameInput>
    create: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
  }

  export type UserUpdateWithoutGameInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUpdateManyWithoutUserNestedInput
    Stage?: StageUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUpdateManyWithoutUserNestedInput
    Vote?: VoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUncheckedUpdateManyWithoutUserNestedInput
    Stage?: StageUncheckedUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUncheckedUpdateManyWithoutUserNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AvatarGameUpsertWithWhereUniqueWithoutGameInput = {
    where: AvatarGameWhereUniqueInput
    update: XOR<AvatarGameUpdateWithoutGameInput, AvatarGameUncheckedUpdateWithoutGameInput>
    create: XOR<AvatarGameCreateWithoutGameInput, AvatarGameUncheckedCreateWithoutGameInput>
  }

  export type AvatarGameUpdateWithWhereUniqueWithoutGameInput = {
    where: AvatarGameWhereUniqueInput
    data: XOR<AvatarGameUpdateWithoutGameInput, AvatarGameUncheckedUpdateWithoutGameInput>
  }

  export type AvatarGameUpdateManyWithWhereWithoutGameInput = {
    where: AvatarGameScalarWhereInput
    data: XOR<AvatarGameUpdateManyMutationInput, AvatarGameUncheckedUpdateManyWithoutAvatarGameInput>
  }

  export type GameStageUpsertWithWhereUniqueWithoutGameInput = {
    where: GameStageWhereUniqueInput
    update: XOR<GameStageUpdateWithoutGameInput, GameStageUncheckedUpdateWithoutGameInput>
    create: XOR<GameStageCreateWithoutGameInput, GameStageUncheckedCreateWithoutGameInput>
  }

  export type GameStageUpdateWithWhereUniqueWithoutGameInput = {
    where: GameStageWhereUniqueInput
    data: XOR<GameStageUpdateWithoutGameInput, GameStageUncheckedUpdateWithoutGameInput>
  }

  export type GameStageUpdateManyWithWhereWithoutGameInput = {
    where: GameStageScalarWhereInput
    data: XOR<GameStageUpdateManyMutationInput, GameStageUncheckedUpdateManyWithoutGameStageInput>
  }

  export type GameStageScalarWhereInput = {
    AND?: Enumerable<GameStageScalarWhereInput>
    OR?: Enumerable<GameStageScalarWhereInput>
    NOT?: Enumerable<GameStageScalarWhereInput>
    id?: IntFilter | number
    position?: IntFilter | number
    gameId?: IntFilter | number
    stageId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type VoteUpsertWithWhereUniqueWithoutGameInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutGameInput, VoteUncheckedUpdateWithoutGameInput>
    create: XOR<VoteCreateWithoutGameInput, VoteUncheckedCreateWithoutGameInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutGameInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutGameInput, VoteUncheckedUpdateWithoutGameInput>
  }

  export type VoteUpdateManyWithWhereWithoutGameInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutVoteInput>
  }

  export type AvatarCreateWithoutAvatarGameInput = {
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    User: UserCreateNestedOneWithoutAvatarInput
    createdAt?: Date | string
    updatedAt?: Date | string
    EquipItem?: EquipItemCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUncheckedCreateWithoutAvatarGameInput = {
    id?: number
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    EquipItem?: EquipItemUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type AvatarCreateOrConnectWithoutAvatarGameInput = {
    where: AvatarWhereUniqueInput
    create: XOR<AvatarCreateWithoutAvatarGameInput, AvatarUncheckedCreateWithoutAvatarGameInput>
  }

  export type GameCreateWithoutAvatarGameInput = {
    name: string
    level: number
    description: string
    User: UserCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
    GameStage?: GameStageCreateNestedManyWithoutGameInput
    Vote?: VoteCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutAvatarGameInput = {
    id?: number
    name: string
    level: number
    description: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    GameStage?: GameStageUncheckedCreateNestedManyWithoutGameInput
    Vote?: VoteUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutAvatarGameInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutAvatarGameInput, GameUncheckedCreateWithoutAvatarGameInput>
  }

  export type AvatarUpsertWithoutAvatarGameInput = {
    update: XOR<AvatarUpdateWithoutAvatarGameInput, AvatarUncheckedUpdateWithoutAvatarGameInput>
    create: XOR<AvatarCreateWithoutAvatarGameInput, AvatarUncheckedCreateWithoutAvatarGameInput>
  }

  export type AvatarUpdateWithoutAvatarGameInput = {
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    User?: UserUpdateOneRequiredWithoutAvatarNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EquipItem?: EquipItemUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarUncheckedUpdateWithoutAvatarGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EquipItem?: EquipItemUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type GameUpsertWithoutAvatarGameInput = {
    update: XOR<GameUpdateWithoutAvatarGameInput, GameUncheckedUpdateWithoutAvatarGameInput>
    create: XOR<GameCreateWithoutAvatarGameInput, GameUncheckedCreateWithoutAvatarGameInput>
  }

  export type GameUpdateWithoutAvatarGameInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutGameNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameStage?: GameStageUpdateManyWithoutGameNestedInput
    Vote?: VoteUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutAvatarGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameStage?: GameStageUncheckedUpdateManyWithoutGameNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutGameNestedInput
  }

  export type UserCreateWithoutStageInput = {
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentCreateNestedManyWithoutUserInput
    Avatar?: AvatarCreateNestedManyWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    UserItem?: UserItemCreateNestedManyWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStageInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    Avatar?: AvatarUncheckedCreateNestedManyWithoutUserInput
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    UserItem?: UserItemUncheckedCreateNestedManyWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStageInput, UserUncheckedCreateWithoutStageInput>
  }

  export type GameStageCreateWithoutStageInput = {
    position: number
    Game: GameCreateNestedOneWithoutGameStageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageUncheckedCreateWithoutStageInput = {
    id?: number
    position: number
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageCreateOrConnectWithoutStageInput = {
    where: GameStageWhereUniqueInput
    create: XOR<GameStageCreateWithoutStageInput, GameStageUncheckedCreateWithoutStageInput>
  }

  export type GameStageCreateManyStageInputEnvelope = {
    data: Enumerable<GameStageCreateManyStageInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStageInput = {
    update: XOR<UserUpdateWithoutStageInput, UserUncheckedUpdateWithoutStageInput>
    create: XOR<UserCreateWithoutStageInput, UserUncheckedCreateWithoutStageInput>
  }

  export type UserUpdateWithoutStageInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUpdateManyWithoutUserNestedInput
    Game?: GameUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUpdateManyWithoutUserNestedInput
    Vote?: VoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStageInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUncheckedUpdateManyWithoutUserNestedInput
    Game?: GameUncheckedUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUncheckedUpdateManyWithoutUserNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameStageUpsertWithWhereUniqueWithoutStageInput = {
    where: GameStageWhereUniqueInput
    update: XOR<GameStageUpdateWithoutStageInput, GameStageUncheckedUpdateWithoutStageInput>
    create: XOR<GameStageCreateWithoutStageInput, GameStageUncheckedCreateWithoutStageInput>
  }

  export type GameStageUpdateWithWhereUniqueWithoutStageInput = {
    where: GameStageWhereUniqueInput
    data: XOR<GameStageUpdateWithoutStageInput, GameStageUncheckedUpdateWithoutStageInput>
  }

  export type GameStageUpdateManyWithWhereWithoutStageInput = {
    where: GameStageScalarWhereInput
    data: XOR<GameStageUpdateManyMutationInput, GameStageUncheckedUpdateManyWithoutGameStageInput>
  }

  export type GameCreateWithoutGameStageInput = {
    name: string
    level: number
    description: string
    User: UserCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameCreateNestedManyWithoutGameInput
    Vote?: VoteCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGameStageInput = {
    id?: number
    name: string
    level: number
    description: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameUncheckedCreateNestedManyWithoutGameInput
    Vote?: VoteUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameStageInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameStageInput, GameUncheckedCreateWithoutGameStageInput>
  }

  export type StageCreateWithoutGameStageInput = {
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    User: UserCreateNestedOneWithoutStageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageUncheckedCreateWithoutGameStageInput = {
    id?: number
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageCreateOrConnectWithoutGameStageInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutGameStageInput, StageUncheckedCreateWithoutGameStageInput>
  }

  export type GameUpsertWithoutGameStageInput = {
    update: XOR<GameUpdateWithoutGameStageInput, GameUncheckedUpdateWithoutGameStageInput>
    create: XOR<GameCreateWithoutGameStageInput, GameUncheckedCreateWithoutGameStageInput>
  }

  export type GameUpdateWithoutGameStageInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutGameNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUpdateManyWithoutGameNestedInput
    Vote?: VoteUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGameStageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUncheckedUpdateManyWithoutGameNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutGameNestedInput
  }

  export type StageUpsertWithoutGameStageInput = {
    update: XOR<StageUpdateWithoutGameStageInput, StageUncheckedUpdateWithoutGameStageInput>
    create: XOR<StageCreateWithoutGameStageInput, StageUncheckedCreateWithoutGameStageInput>
  }

  export type StageUpdateWithoutGameStageInput = {
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutStageNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageUncheckedUpdateWithoutGameStageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemCreateWithoutItemInput = {
    User: UserCreateNestedOneWithoutUserItemInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemUncheckedCreateWithoutItemInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemCreateOrConnectWithoutItemInput = {
    where: UserItemWhereUniqueInput
    create: XOR<UserItemCreateWithoutItemInput, UserItemUncheckedCreateWithoutItemInput>
  }

  export type UserItemCreateManyItemInputEnvelope = {
    data: Enumerable<UserItemCreateManyItemInput>
    skipDuplicates?: boolean
  }

  export type EquipItemCreateWithoutItemInput = {
    Avatar: AvatarCreateNestedOneWithoutEquipItemInput
    handRigthId: number
    handLeftId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemUncheckedCreateWithoutItemInput = {
    id?: number
    avatarId: number
    handRigthId: number
    handLeftId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemCreateOrConnectWithoutItemInput = {
    where: EquipItemWhereUniqueInput
    create: XOR<EquipItemCreateWithoutItemInput, EquipItemUncheckedCreateWithoutItemInput>
  }

  export type EquipItemCreateManyItemInputEnvelope = {
    data: Enumerable<EquipItemCreateManyItemInput>
    skipDuplicates?: boolean
  }

  export type UserItemUpsertWithWhereUniqueWithoutItemInput = {
    where: UserItemWhereUniqueInput
    update: XOR<UserItemUpdateWithoutItemInput, UserItemUncheckedUpdateWithoutItemInput>
    create: XOR<UserItemCreateWithoutItemInput, UserItemUncheckedCreateWithoutItemInput>
  }

  export type UserItemUpdateWithWhereUniqueWithoutItemInput = {
    where: UserItemWhereUniqueInput
    data: XOR<UserItemUpdateWithoutItemInput, UserItemUncheckedUpdateWithoutItemInput>
  }

  export type UserItemUpdateManyWithWhereWithoutItemInput = {
    where: UserItemScalarWhereInput
    data: XOR<UserItemUpdateManyMutationInput, UserItemUncheckedUpdateManyWithoutUserItemInput>
  }

  export type EquipItemUpsertWithWhereUniqueWithoutItemInput = {
    where: EquipItemWhereUniqueInput
    update: XOR<EquipItemUpdateWithoutItemInput, EquipItemUncheckedUpdateWithoutItemInput>
    create: XOR<EquipItemCreateWithoutItemInput, EquipItemUncheckedCreateWithoutItemInput>
  }

  export type EquipItemUpdateWithWhereUniqueWithoutItemInput = {
    where: EquipItemWhereUniqueInput
    data: XOR<EquipItemUpdateWithoutItemInput, EquipItemUncheckedUpdateWithoutItemInput>
  }

  export type EquipItemUpdateManyWithWhereWithoutItemInput = {
    where: EquipItemScalarWhereInput
    data: XOR<EquipItemUpdateManyMutationInput, EquipItemUncheckedUpdateManyWithoutEquipItemInput>
  }

  export type UserCreateWithoutUserItemInput = {
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentCreateNestedManyWithoutUserInput
    Avatar?: AvatarCreateNestedManyWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    Stage?: StageCreateNestedManyWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserItemInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    Avatar?: AvatarUncheckedCreateNestedManyWithoutUserInput
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    Stage?: StageUncheckedCreateNestedManyWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserItemInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserItemInput, UserUncheckedCreateWithoutUserItemInput>
  }

  export type ItemCreateWithoutUserItemInput = {
    name: string
    type: string
    effect: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    EquipItem?: EquipItemCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutUserItemInput = {
    id?: number
    name: string
    type: string
    effect: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    EquipItem?: EquipItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutUserItemInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutUserItemInput, ItemUncheckedCreateWithoutUserItemInput>
  }

  export type UserUpsertWithoutUserItemInput = {
    update: XOR<UserUpdateWithoutUserItemInput, UserUncheckedUpdateWithoutUserItemInput>
    create: XOR<UserCreateWithoutUserItemInput, UserUncheckedCreateWithoutUserItemInput>
  }

  export type UserUpdateWithoutUserItemInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUpdateManyWithoutUserNestedInput
    Game?: GameUpdateManyWithoutUserNestedInput
    Stage?: StageUpdateManyWithoutUserNestedInput
    Vote?: VoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUncheckedUpdateManyWithoutUserNestedInput
    Game?: GameUncheckedUpdateManyWithoutUserNestedInput
    Stage?: StageUncheckedUpdateManyWithoutUserNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemUpsertWithoutUserItemInput = {
    update: XOR<ItemUpdateWithoutUserItemInput, ItemUncheckedUpdateWithoutUserItemInput>
    create: XOR<ItemCreateWithoutUserItemInput, ItemUncheckedCreateWithoutUserItemInput>
  }

  export type ItemUpdateWithoutUserItemInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EquipItem?: EquipItemUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutUserItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EquipItem?: EquipItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type AvatarCreateWithoutEquipItemInput = {
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    User: UserCreateNestedOneWithoutAvatarInput
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUncheckedCreateWithoutEquipItemInput = {
    id?: number
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type AvatarCreateOrConnectWithoutEquipItemInput = {
    where: AvatarWhereUniqueInput
    create: XOR<AvatarCreateWithoutEquipItemInput, AvatarUncheckedCreateWithoutEquipItemInput>
  }

  export type ItemCreateWithoutEquipItemInput = {
    name: string
    type: string
    effect: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    UserItem?: UserItemCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutEquipItemInput = {
    id?: number
    name: string
    type: string
    effect: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    UserItem?: UserItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutEquipItemInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutEquipItemInput, ItemUncheckedCreateWithoutEquipItemInput>
  }

  export type AvatarUpsertWithoutEquipItemInput = {
    update: XOR<AvatarUpdateWithoutEquipItemInput, AvatarUncheckedUpdateWithoutEquipItemInput>
    create: XOR<AvatarCreateWithoutEquipItemInput, AvatarUncheckedCreateWithoutEquipItemInput>
  }

  export type AvatarUpdateWithoutEquipItemInput = {
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    User?: UserUpdateOneRequiredWithoutAvatarNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarUncheckedUpdateWithoutEquipItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type ItemUpsertWithoutEquipItemInput = {
    update: XOR<ItemUpdateWithoutEquipItemInput, ItemUncheckedUpdateWithoutEquipItemInput>
    create: XOR<ItemCreateWithoutEquipItemInput, ItemUncheckedCreateWithoutEquipItemInput>
  }

  export type ItemUpdateWithoutEquipItemInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UserItem?: UserItemUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutEquipItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UserItem?: UserItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type UserCreateWithoutVoteInput = {
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentCreateNestedManyWithoutUserInput
    Avatar?: AvatarCreateNestedManyWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    Stage?: StageCreateNestedManyWithoutUserInput
    UserItem?: UserItemCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVoteInput = {
    id?: number
    email: string
    password: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    Avatar?: AvatarUncheckedCreateNestedManyWithoutUserInput
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    Stage?: StageUncheckedCreateNestedManyWithoutUserInput
    UserItem?: UserItemUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVoteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
  }

  export type GameCreateWithoutVoteInput = {
    name: string
    level: number
    description: string
    User: UserCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameCreateNestedManyWithoutGameInput
    GameStage?: GameStageCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutVoteInput = {
    id?: number
    name: string
    level: number
    description: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    AvatarGame?: AvatarGameUncheckedCreateNestedManyWithoutGameInput
    GameStage?: GameStageUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutVoteInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutVoteInput, GameUncheckedCreateWithoutVoteInput>
  }

  export type UserUpsertWithoutVoteInput = {
    update: XOR<UserUpdateWithoutVoteInput, UserUncheckedUpdateWithoutVoteInput>
    create: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
  }

  export type UserUpdateWithoutVoteInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUpdateManyWithoutUserNestedInput
    Game?: GameUpdateManyWithoutUserNestedInput
    Stage?: StageUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    Avatar?: AvatarUncheckedUpdateManyWithoutUserNestedInput
    Game?: GameUncheckedUpdateManyWithoutUserNestedInput
    Stage?: StageUncheckedUpdateManyWithoutUserNestedInput
    UserItem?: UserItemUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameUpsertWithoutVoteInput = {
    update: XOR<GameUpdateWithoutVoteInput, GameUncheckedUpdateWithoutVoteInput>
    create: XOR<GameCreateWithoutVoteInput, GameUncheckedCreateWithoutVoteInput>
  }

  export type GameUpdateWithoutVoteInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutGameNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUpdateManyWithoutGameNestedInput
    GameStage?: GameStageUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUncheckedUpdateManyWithoutGameNestedInput
    GameStage?: GameStageUncheckedUpdateManyWithoutGameNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentCreateManyUserInput = {
    id?: number
    name: string
    birthday: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarCreateManyUserInput = {
    id?: number
    nick: string
    stamina: number
    mana: number
    level: number
    xp: number
    gold: number
    identity: Gender
    breed: Races
    class: Classes
    skill: Skills
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateManyUserInput = {
    id?: number
    name: string
    level: number
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageCreateManyUserInput = {
    id?: number
    name: string
    options: string
    description: string
    objects: string
    refStageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemCreateManyUserInput = {
    id?: number
    itemId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteCreateManyUserInput = {
    id?: number
    note: number
    post: string
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyWithoutEnrollmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarUpdateWithoutUserInput = {
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EquipItem?: EquipItemUpdateManyWithoutAvatarNestedInput
    AvatarGame?: AvatarGameUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EquipItem?: EquipItemUncheckedUpdateManyWithoutAvatarNestedInput
    AvatarGame?: AvatarGameUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarUncheckedUpdateManyWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    nick?: StringFieldUpdateOperationsInput | string
    stamina?: IntFieldUpdateOperationsInput | number
    mana?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    identity?: EnumGenderFieldUpdateOperationsInput | Gender
    breed?: EnumRacesFieldUpdateOperationsInput | Races
    class?: EnumClassesFieldUpdateOperationsInput | Classes
    skill?: EnumSkillsFieldUpdateOperationsInput | Skills
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUpdateManyWithoutGameNestedInput
    GameStage?: GameStageUpdateManyWithoutGameNestedInput
    Vote?: VoteUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AvatarGame?: AvatarGameUncheckedUpdateManyWithoutGameNestedInput
    GameStage?: GameStageUncheckedUpdateManyWithoutGameNestedInput
    Vote?: VoteUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameStage?: GameStageUpdateManyWithoutStageNestedInput
  }

  export type StageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameStage?: GameStageUncheckedUpdateManyWithoutStageNestedInput
  }

  export type StageUncheckedUpdateManyWithoutStageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    objects?: StringFieldUpdateOperationsInput | string
    refStageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemUpdateWithoutUserInput = {
    Item?: ItemUpdateOneRequiredWithoutUserItemNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemUncheckedUpdateManyWithoutUserItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpdateWithoutUserInput = {
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    Game?: GameUpdateOneRequiredWithoutVoteNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemCreateManyAvatarInput = {
    id?: number
    amuletId: number
    handRigthId: number
    handLeftId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameCreateManyAvatarInput = {
    id?: number
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemUpdateWithoutAvatarInput = {
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    Item?: ItemUpdateOneRequiredWithoutEquipItemNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemUncheckedUpdateWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    amuletId?: IntFieldUpdateOperationsInput | number
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemUncheckedUpdateManyWithoutEquipItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    amuletId?: IntFieldUpdateOperationsInput | number
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameUpdateWithoutAvatarInput = {
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    Game?: GameUpdateOneRequiredWithoutAvatarGameNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameUncheckedUpdateWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameUncheckedUpdateManyWithoutAvatarGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameCreateManyGameInput = {
    id?: number
    stage: string
    finished?: boolean
    position?: number
    skill?: boolean
    avatarId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageCreateManyGameInput = {
    id?: number
    position: number
    stageId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteCreateManyGameInput = {
    id?: number
    note: number
    post: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AvatarGameUpdateWithoutGameInput = {
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    Avatar?: AvatarUpdateOneRequiredWithoutAvatarGameNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvatarGameUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    position?: IntFieldUpdateOperationsInput | number
    skill?: BoolFieldUpdateOperationsInput | boolean
    avatarId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageUpdateWithoutGameInput = {
    position?: IntFieldUpdateOperationsInput | number
    Stage?: StageUpdateOneRequiredWithoutGameStageNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    stageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageUncheckedUpdateManyWithoutGameStageInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    stageId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpdateWithoutGameInput = {
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutVoteNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    note?: IntFieldUpdateOperationsInput | number
    post?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageCreateManyStageInput = {
    id?: number
    position: number
    gameId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameStageUpdateWithoutStageInput = {
    position?: IntFieldUpdateOperationsInput | number
    Game?: GameUpdateOneRequiredWithoutGameStageNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameStageUncheckedUpdateWithoutStageInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemCreateManyItemInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipItemCreateManyItemInput = {
    id?: number
    avatarId: number
    handRigthId: number
    handLeftId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserItemUpdateWithoutItemInput = {
    User?: UserUpdateOneRequiredWithoutUserItemNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserItemUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemUpdateWithoutItemInput = {
    Avatar?: AvatarUpdateOneRequiredWithoutEquipItemNestedInput
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipItemUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarId?: IntFieldUpdateOperationsInput | number
    handRigthId?: IntFieldUpdateOperationsInput | number
    handLeftId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}